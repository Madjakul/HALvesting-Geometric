<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Dynamically Generated Interfaces in XML Based Architecture 1</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Minit</forename><surname>Gupta</surname></persName>
						</author>
						<author role="corresp">
							<persName><forename type="first">Laurent</forename><surname>Romary</surname></persName>
							<email>laurent.romary@loria.fr</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="laboratory">Ce travail a bénéficié du soutien du Ministère de la Recherche dans le cadre du projet Tiissad (Technologies de l&apos;Information Intégrées aux Services des Soins A Domicile</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Computer Science and Engineering IIT Kanpur</orgName>
								<address>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">LORIA Labs</orgName>
								<address>
									<settlement>Nancy</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Dynamically Generated Interfaces in XML Based Architecture 1</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">00728297E7E49EC33D465562E1154941</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-08-24T15:02+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Providing on-line services on the Internet will require the definition of flexible interfaces that are capable of adapting to the user's characteristics. This is all the more important in the context of medical applications like home monitoring, where no two patients have the same medical profile and yet, the same kind of information has to be acquired for both of them. Still, the problem is not limited to the capacity of defining generic interfaces, as has been made possible by UIML, but also to define the underlying information structures from which these may be generated. In particular, it is necessary to design an architecture, which, on one hand, allows us to identify the basic components that are stable across different configurations, and on the other, a way to describe user profiles out of these components.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The project DIATELIC, which we quote as an attempt in this direction, concerns tele-monitoring of patients going through peritoneal dialysis. We have defined XML abstractions, termed as "medical components", to represent the patient's profile. The application configures the customizable properties of the patient's interface based on these profiles and generates a UIML document dynamically. The static part of the interface has been prewritten as templates. The interface allows the patient to feed the data manually or use a device which allows "automatic data acquisition". The acquired medical data is transferred through a modem connection to an expert system, which analyses the data and sends alerts to the concerned doctor.</p><p>In this paper we would like to show how UIML should best be seen as an important component in an XML based architecture. It highlights how the XML nature of UIML makes it the ideal choice for "on the fly" generation of graphical interfaces. Also the ability to instantiate java classes and access methods at runtime provides for a smooth way of communication with the other applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>The coming up of Internet has made the consumer infinitesimally more powerful than the producer. In this new business model, where the geographic boundaries cease to exist and competition has now moved to a global level, it is the producer, who has to make his presence felt, rather than the consumer searching for the best possible option. The demand for online services has been ever increasing and along with it, a lot of research is being done for providing user friendly and customizable interfaces to attract the customer. You can do virtually everything online, right from your household purchasing to stock brokerage.</p><p>Many tools have been developed that can render generic and user-friendly interfaces, possessing extensive capabilities but couldn't be deployed on the web due to large data traffic requirements. This provided the impetus to the development of markup languages, specifically XML, which clearly defines data in an open and neutral manner. Most XML based languages are used for defining documents. In other words, they allow programs to break up a lot of words, pictures and other data into useful chunks that can be processed by a program.</p><p>UIML -User Interface Markup Language, being XML based language, adapts well into the XML architecture. The inherent simplicity of defining user interfaces in an application independent manner and the extensibility to different devices makes it an ideal choice for defining and rendering generic interfaces. Using "DIATELICtele monitoring of patients going through peritoneal dialysis" as an example, an architecture is demonstrated which renders customized patient's interface dynamically using UIML.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DIATELIC -tele monitoring of patients going through peritoneal dialysis.</head><p>The monitoring of patients suffering from lifelong diseases like diabetes, heart ailments, renal failure (considered in this paper from the point of view of peritoneal dialysis treatment) has always been of concern to doctors. In the hospital the patient is constantly reminded of being not normal and suffers psychologically though he gets the best caring and treatment. He is found to be more comfortable and shows fast recovery in his homely environment but finding a 24hour caretaker for every patient is not feasible. Sometimes, the sheer number of the patients, in itself, is a problem. In Diatelic, an attempt is made to offer the best of both the worlds using the power of Internet and online services.</p><p>A set of patients suffering from peritoneal dialysis is being currently monitored using a simple interface and an expert system. Each patient is required to submit medical data like blood pressure, weight and size of bags etc. four times a day on a static interface. The patient identifies himself with a password and submits the data manually. This data is transferred through a modem connection to an expert system (Refer Figure <ref type="figure" target="#fig_0">1</ref>). The expert system is a teachable application which analyses the data and stores it in a database for future reference. In case the discrepancy is more than allowed it sends alerts to the concerned doctor. The doctor, using the statistics generated from the database, suggests the treatment to the patient.</p><p>The patient feels secure as he is being constantly monitored by a virtual doctor (the expert system) and relaxes in his homely environment. The doctor, on the other hand, attends only to the alerts and can handle a far larger number than previously possible. The above factors demanded an abstraction (Refer Figure <ref type="figure">2</ref>) above the Diatelic interface making the application more medically and environmentally aware about the patient. Along with monitoring parameters, the availability of "Data Acquisition Machines" would also affect the functioning and rendering of the interface. The abstraction would give a representation to the various monitoring parameters that need to be periodically analyzed by the patient. The patient's interface would be generated "on the fly" from this abstraction and the medical data extracted on submission. A change in the patient's characteristics, leading to a corresponding change in the monitoring parameters, would just require updating of this abstraction on the client's local machine making the application more generic and easily extensible. The static part of the interface has been prewritten as templates. This would also provide some control to the doctor on the monitoring parameters as in the hospital.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2</head><p>The XML based architecture Figure <ref type="figure">3</ref> The medical components The abstractions have been termed as medical components, in short medcomps. The key points in defining such an abstraction were patient's Internet connectivity and bandwidth requirements (each patient has a typical modem connection), as it would be frequently updated. Also it should be sufficiently expressible in representing the monitoring parameters. XML, owing to its extensibility and simplicity in representing semi-structured data was chosen for defining the abstraction. With the development of UIML, also an XML based language, a homogenous view was provided to the whole application.</p><p>An XML DTD has been defined to represent the medcomps. Each medcomp represents a single monitoring parameter referred to as an entity and possesses a unique id (Refer Figure <ref type="figure">4</ref>). It defines the meta data about the entity that this medcomp represents. To maintain the generic nature of the medcomps, the peers part defining the retrieval of the medical data from the interface has been defined as a separate tag.</p><p>&lt;medComp id="00215062000112"&gt; &lt;name&gt;Blood Pressure&lt;/name&gt; &lt;state&gt;sitting&lt;/state&gt; … &lt;value id="00215062000112sys" datatype="integer"&gt; &lt;descrip type="medical" class="clinical"&gt;systolic&lt;/descrip&gt; &lt;bound type="max"&gt;23&lt;/bound&gt; &lt;/value&gt; … &lt;/medComp&gt; &lt;peers&gt; … &lt;retrieve idref="00215062000112sys" type="bsnQuery"&gt; &lt;method&gt; &lt;name&gt;bsnQuery&lt;/name&gt; &lt;param datatype="char" name="BP"/&gt; &lt;param datatype="char" name="Systolic"/&gt; &lt;return datatype="integer"/&gt; &lt;/method&gt; &lt;/retrieve&gt; … &lt;/peers&gt; (Medical Component representing the entity -Blood Pressure) Figure <ref type="figure">4</ref> The medcomp contains the name, physical state and the sets of values that are to be measured. In the example in Figure <ref type="figure">4</ref>, the entity is Blood Pressure and the physical state is specified as sitting. It has three values specifying the three parameters namely time, systolic blood pressure and diastolic blood pressure.</p><p>Each value is also given a unique id that is used for referencing in the peers tag.</p><p>The peers part specifies the method name and its arguments, which when called, retrieves the medical data from the interface.</p><p>This set of medical components and the corresponding peers tag forms the complete patient's profile.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Interface Generation</head><p>UIML, being XML-based, can be easily generated using the implementations of the DOM API. You can, not only define the components and their layouts at runtime but can also control the actions that are to be taken in case of certain events. The UIML to Java Swing Renderer has been used in the development of this application. The ability to call methods (with arguments) of predefined java classes also further adds to the flexibility provided to the user.</p><p>The application on successful identification by the patient fetches his profile from the server through the modem connection. Using DOM I for parsing the fetched XML document, it extracts the various entities and their peers. For each entity the static part of the interface has been prewritten as UIML templates (Refer Figure <ref type="figure">5</ref>). As the entities are parsed, their templates are accessed and the missing information is restored from the fetched XML document. For each entity a separate help frame is also dynamically generated which shows up when the patient demands help.</p><p>When all the entities have been parsed and their templates completed, they are combined to form a single UIML file containing all the information needed to render the interface and transfer the extracted data to the expert system at the backend. The UIML to Java Swing Renderer is then invoked on this UIML document, rendering the interface and prompting the patient to feed the data.</p><p>&lt;/template name="HelpTemplate"&gt; &lt;structure&gt; &lt;part class="JFrame" name="BPHelpFrame"&gt; &lt;style&gt; &lt;property name="size"&gt;280,300&lt;/property&gt; … &lt;property name="title"&gt;BP Help&lt;/property&gt; &lt;/style&gt; &lt;part class="JPanel" name="BPHelpMainPanel"&gt; &lt;style&gt; … &lt;/style&gt; &lt;part class="JTextArea" name="BPHelpTextArea"&gt; … &lt;/part&gt; &lt;part class="JButton" name="BPHelpCloseButton"&gt; … &lt;/part&gt; &lt;/part&gt; &lt;/part&gt; &lt;/structure&gt; &lt;behavior&gt; &lt;rule&gt; &lt;condition&gt; &lt;event class="actionPerformed" part-name="BPHelpCloseButton" /&gt; &lt;/condition&gt; &lt;action&gt; &lt;property name="visible" part-name="BPHelpFrame"&gt;false&lt;/property&gt; &lt;/action&gt; &lt;/rule&gt; &lt;/behavior&gt; &lt;/template&gt; (An example of the prewritten UIML template, the black bold underlined text has been filled up from the fetched XML document) Figure <ref type="figure">5</ref> Results</p><p>With the use of UIML, the previous diatelic interface has been enhanced. Some snapshots have been included here.</p><p>A separate panel for each entity has been defined. This provides uniformity even when the number and type of monitoring parameters are different for patients.</p><p>The help panel has been shown here along with the bag change panel</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 New</head><label>1</label><figDesc>Figure 1</figDesc><graphic coords="4,124.98,105.72,345.30,258.36" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="5,123.66,132.54,347.94,258.42" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="5,64.44,444.66,466.32,186.66" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="8,201.66,355.02,191.88,262.50" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="9,101.46,105.72,392.34,264.72" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="9,64.26,410.64,466.68,315.00" type="bitmap" /></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p> This project has benefited from collaboration with Gambro, a pharmaceutical company strongly involved in PD.</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Analysis and Future Perspectives</head><p>The interface generation can be made more efficient.</p><p>In the current implementation a separate method parses each template defined. With the increase in monitoring parameters the redundant code will also increase extensively. A plausible implementation would be to write a method, which identifies the missing parameter by some special characters and fills in the appropriate value from the medical component.</p><p>Also, editing of the templates requires rewriting of the corresponding parsing code. With a generic method editing and debugging the interface will be easier.</p><p>The current interface does not have the capability to parse the data locally. For Temperature if non-numeric value is entered, it will be accepted. The analysis of data is done on submission. UIML can be enhanced to include the basic type definition and allow for type checking.</p><p>The medical data are very much related to each other like Diastolic Value of Blood Pressure should be less than the Systolic Value. Simple mathematical relations can be implemented within UIML.</p><p>While prompting the patient to feed the values for the monitoring parameters, the doctor may wish to measure additional parameters depending on the values that the patient has entered for previous ones. UIML can be extended to include parsing-based-events and also the programming language control structures like if-then-else, do-while and for.</p><p>Another, more adventurous, perspective of extension was to express the doctor side interface using UIML. This would </p></div>			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
