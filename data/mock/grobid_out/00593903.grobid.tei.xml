<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main"></title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">5BD9BD80A219160DD2BE531B719F3144</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-08-24T15:02+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Preamble</head><p>&lt;tiger2/&gt; is an XML format serializing the ISO meta-model for syntactic annotations defined in the SynAF<ref type="foot" target="#foot_0">1</ref> framework. The format is based on the TigerXML format developed as part of the German TiGer Treebank annotation project<ref type="foot" target="#foot_1">2</ref> . The focus in &lt;tiger2/&gt; is on the ability to flexibly express all manner of syntactic annotation structures, including multiple, possibly conflicting, typed annotation nodes and edges with arbitrary annotation names expressing both constituent and dependency trees with modern, standard conformant mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Graph structure</head><p>In &lt;tiger2/&gt; annotations are represented in a graph structure. The graph structure can be described as G=(V, E) with: a set of nodes V and a set of edges E with e=(v ∈ V, v ∈ V) ∈ E A graph represents a bundle of interrelated nodes and edges. It is not specified which parts of a primary text are covered by a single graph: a graph can cover e.g. a sentence, a sub-sentence, a chapter or a whole text.</p><p>Nodes and Edges are more or less placeholders for linguistic annotations. An annotation is in general an attribute-value-pair. In &lt;tiger2/&gt; we used two kinds of nodes 1) terminal-nodes and 2) nonterminal-nodes.</p><p>A terminal-node represents the reference to the primary data. As we will see later on, this can be a direct reference to a text-span or an indirect one to other xml-elements in e.g. a MAF-file (Morphosyntactic Annotation Framework, see http://atoll.inria.fr/~clerger/MAF/html/index.html).</p><p>Terminal nodes are represented by the &lt;t&gt;-element and are grouped together in a &lt;terminals&gt;element.</p><p>A Nonterminal node is an inner node, referring directly or indirectly to a terminal node. It is represented by the &lt;nt&gt;-element and belongs to the surrounding element &lt;nonterminals&gt;.</p><p>An Edge always has to have a source and a target. Both of them can be either a terminal or a nonterminal-node. In &lt;tiger2/&gt; an edge is represented by the &lt;edge&gt;-element and its source is given by the surrounding element. This means that an &lt;edge&gt;-element always has to be a child-element of a &lt;t&gt; or an &lt;nt&gt; element. The target is given by the @target attribute and must refer to a node in the same XML-document.</p><p>Example 1 shows the &lt;tiger2/&gt; representation of the graph structure:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Primary data and token representation</head><p>In &lt;tiger2/&gt; there are different possibilities to represent primary data and tokens. Tokens and primary data can either be included in the &lt;tiger2/&gt;-document (inline representation), or they can be referred to, being contained in another file (standoff representation). The inline representation makes it possible to have all data in just one &lt;tiger2/&gt;-document, whereas the standoff representation enables one to refer to other formats, for instance a MAF file containing tokens and wordForms.</p><p>Both options are possible and the decision is largely made based on the needs of the corpus.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Inline representation:</head><p>The benefit of the inline representation is that you can find all elements of a corpus in just one &lt;tiger2/&gt;-document, making it easier for humans to read it and for machines to process it. To go this way you can encode the primary data as part of the terminal-nodes. This can be done by using the @word attribute of the &lt;t&gt;-element. An example is given by example 2.</p><p>Example 2 shows two terminal-nodes, representing two tokens. The first token contains the word "two", the second token contains the word "words". The order of the tokens is given by the order of the xml-elements. In this case it means that the word "two" is followed by the word "words" in the primary data.</p><p>However it should be pointed out that this representation is not primary-data-preserving. This means, that we loose some information about the primary data when representing a primary text in this representation. On the one hand the inline representation does not care about whitespaces between tokens, and on the other hand untokenized parts of the primary data will be lost. Take a look at examples 3 and 4.</p><p>Example 1: graph structure &lt;graph xml:id="s1_g1"&gt; &lt;terminals&gt; &lt;t xml:id="s1_t1"/&gt; &lt;t xml:id="s1_t2"/&gt; &lt;/terminals&gt; &lt;nonterminals&gt; &lt;nt xml:id="s1_nt1"&gt; &lt;edge xml:id="s1_e1" target="#s1_t1" /&gt; &lt;edge xml:id="s1_e2"target="#s1_t2" /&gt; &lt;/nt&gt; &lt;/nonterminals&gt; &lt;/graph&gt; Example 2: graph structure &lt;t xml:id="s1_t1" word="two"/&gt; &lt;t xml:id="s1_t2" word="words"/&gt;</p><p>In example 3 and 4 one can see that it is not possible to resolve whether there was a whitespace between the tokens or not. In the case of token "s1_t1" and "s1_t2" there was one, whereas in the case of punctuations like in tokens "s1_t3?" and "s1_t4" there was none. An unrepresented text span like the word "a" will be lost.</p><p>Because of the restrictions of XML-attributes, another problem occurs: reserved signs like an angle bracket ("&lt;") can not be represented inside an xml-attribute-value. Therefore one has to escape the angle bracket with "&amp;lt;", see example 5.</p><p>When interpreting the primary-data in the case of example 5, it is not possible to resolve whether the origin text contains an angle bracket ("&lt;") or the literal escaping ("&amp;lt;").</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Standoff representation</head><p>The aforementioned problems can be avoided by using a standoff representation. In &lt;tiger2/&gt; you can refer to other files containing the tokens or even higher structures e.g. wordForms. You can do this using the @corresp attribute of the terminal-nodes. The @corresp attribute replaces the @word attribute and contains a reference in XPointer syntax to another resource, for example a MAF-file. You either can use the @word or the @corresp attribute. Example 6, 7 and 8 show the use of the standoff representation via the @corresp attribute.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example 3: primary data</head><p>This is a sample.</p><p>Example 4: inline representation &lt;t xml:id="s1_t1" word="This"/&gt; &lt;t xml:id="s1_t2" word="is"/&gt; &lt;t xml:id="s1_t4" word="sample"/&gt; &lt;t xml:id="s1_t5" word="."/&gt;  <ref type="bibr">,3,3)</ref>)"/&gt; ... &lt;wordForm xml:id="wf_1" lemma="we" tokens="t1"/&gt; &lt;wordForm xml:id="wf_2" lemma="can" tokens="t2"/&gt; Example 6, 7 and 8 contains excerpts of three different files, first an excerpt of a file containing the primary text, second a MAF file containing the tokenisation and an aggregation of tokens to wordForms and third an excerpt of the &lt;tiger2/&gt; document refering the MAF-document.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Typing of nodes and edges</head><p>Nodes and edges can also be given types in &lt;tiger2/&gt;. A type is a special kind of annotation and is represented by the @type attribute contained in a &lt;t&gt;, &lt;nt&gt; or &lt;edge&gt; element. In example 9 we use the @type attribute to give a more special semantic meaning to the terminal nodes "s1_t1", "s1_t2", the nonterminal-node "s1_nt1" and the edges "s1_e1", "s1_e2" and "s1_e3". The example shows the wordForm "house-builder", in which the node house is seen as a direct object dependent of builder, a deverbal noun heading a synthetic compound. The non-terminal node for "housebuilder" may be given a special type to analyze it as a morphological compound, as opposed to a syntactic phrase. Similarly, the dependency edge is given the type "dep" to distinguish it from the constituency edges in the graph.</p><p>The domain of possible @type values is not defined by &lt;tiger2/&gt; and is therefore the responsibility of an interpreting tool. For a more specific definition of a @type value you can define the domain of the values via an annotation with a &lt;feature&gt; element as we will show in the section Using the @type attribute. If you do not use the @type attribute inside a &lt;t&gt;, &lt;nt&gt; or &lt;edge&gt;-element, they will be implicitly set to a default value. In the case of an edge the type will be set to "prim" (a primary edge), in the case of a terminal-node it will be set to "t" and in the case of a nonterminal-node it will be set to "nt". If you want to specify the domain for @type attributes, it is not possible to override the semantics of the three default values. The @type attribute is also used for the declaration of the domain for annotation-names and the domain for annotation-values as we show in section Annotations.</p><p>Example 8: example.tiger2 &lt;terminals&gt; &lt;t xml:id="s9_1" corresp="example.maf#wf_1" /&gt; &lt;t xml:id="s9_2" corresp="example.maf#wf_2"&gt; &lt;/terminals&gt; Example 9: using type for &lt;t&gt;, &lt;nt&gt; and &lt;edge&gt;-element ... &lt;t xml:id="s1_t1" word="house-" type="morpheme" /&gt; &lt;t xml:id="s1_t2" word="builder" type="morpheme"&gt; &lt;edge xml:id ="s1_e1" type= "dep" target="#s1_t1" label="obj"/&gt; &lt;/t&gt; ... &lt;nt xml:id="s1_nt1" type="wordform"&gt; &lt;edge xml:id ="s1_e2" type="comp" target="#s1_t1" /&gt; &lt;edge xml:id ="s1_e3" type="comp" target="#s1_t2" /&gt; &lt;/nt&gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Annotations</head><p>Annotations are realized as attribute-value-pairs and can be appended to nodes and edges. The name of an annotation is given by the name of an XML attribute and the annotation value is given by its XML attribute value. In general in &lt;tiger2/&gt; there are no restrictions for setting names or values for annotations depending on specific linguistic schools. Therefore you are free to append any attributevalue-pair to a &lt;t&gt;, &lt;nt&gt; or &lt;edge&gt; element. The only restriction is given by reserved attributes of &lt;tiger2/&gt; for example @type, @word, @corresp and @domain. These attributes have fixed semantics and cannot be overridden.</p><p>Example 10 shows the annotation mechanism for nodes and edges.</p><p>In example 10 we show a word "I", annotated with the part-of-speech annotation "PP" and the lemma-annotation "I". Neither "pos" nor "lemma" is reserved -they also can be named "part-ofspeech" or "lem" or any other non-reserved name. The terminal "s1_t1" is headed by a nonterminal "s1_nt1" being annotated with the categorical annotation nominal phrase. The edge "s1_e1" corresponding "s1_nt1" and "s1_t1" also gets an annotation ("label='HD'"), which means the nonterminal acts as a head for the terminal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Domain declaration</head><p>In &lt;tiger2/&gt; it is necessary to define a domain for annotation names, this must be done in the header section of &lt;tiger2/&gt;, namely in the &lt;annotations&gt; element inside the element &lt;head&gt;. This domain is referred to by the annotation name inside the node or edge. For example let us take a look again at example 10. The declaration of the domain for annotation-names can appear as shown in example 11.</p><p>The mapping between the annotation name and the domain declaration is done by resolving the e-mail: tiger2@lists.hu-berlin.de homepage: http://korpling.german.hu-berlin.de/tiger2/ HUBerlin-IDSL/INRIA</p><p>Example 10: annotation of a &lt;t&gt;, &lt;nt&gt; and &lt;edge&gt;-element &lt;terminals&gt; &lt;t id="s1_t1" word="I" lemma="I" pos="PP"/&gt; ... &lt;/terminals&gt; &lt;nonterminals&gt; &lt;nt id="s1_nt1" cat="NP"&gt; &lt;edge xml:id="s1_e1" label="HD" target="s1_t1"/&gt; &lt;/nt&gt; ...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>&lt;/nonterminals&gt;</head><p>Example 11: domain declaration for annotation-names and annotation-values &lt;head&gt; &lt;annotations&gt; &lt;feature xml:id="f1" name="pos" domain="t" /&gt; &lt;feature xml:id="f2" name="lemma" domain="t" /&gt; &lt;feature xml:id="f3" name="cat" domain="nt"/&gt; &lt;feature xml:id="f4" name="label" domain="edge"/&gt; &lt;/annotations&gt; &lt;/head&gt; name of the XML attribute of the annotation and the @name attribute of the element &lt;feature&gt;. The attribute @domain specifies that the declared feature is applicable for just the given kind of &lt;tiger2/&gt; elements. In the given example, this means, that the feature declarations for "pos" and "lemma" can only be used by &lt;t&gt; elements, "cat" only can be used by &lt;nt&gt; elements and "label" can only be used by &lt;edge&gt; elements. The attribute @domain is optional and need not be set. If it is not set it means that the feature declaration is available for all three kinds of elements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Feature values</head><p>Not only domains for annotation names can be declared in &lt;tiger2/&gt;, but also domains for annotation values. Declaring a domain for annotation values can be done by using the &lt;value&gt; element inside the &lt;feature&gt; element. The &lt;value&gt; element has a @name attribute, identifying the value name and also working as an anchor for annotation values. The element can contain a text, which acts as a description for the annotation-value. Example 12 shows the use of an annotation value domain declaration. In the case of example 12 the set of possible values for an annotation value with the annotationname "pos" only contains a "PP" element, standing for a personal pronoun. In this case no other values are possible for this annotation for terminal nodes. To increase the set of possible annotation values just add further &lt;value&gt; elements to the &lt;feature&gt; element. The number of possible annotation values is not limited. If there are no &lt;value&gt; elements given inside a &lt;feature&gt; element, the set of annotation values is not defined and can be any string. In this case, a validation of annotation values will not take place. This is very useful in case of lemma annotations, for which it is not possible to define the domain of possible annotation values</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DCR references</head><p>Often domain declarations are not only interesting for one corpus or just one project, they are interesting for a whole community. Therefore several data category registries have evolved. The most popular one is the ISOCat (see: http://www.isocat.org/). When using &lt;tiger2/&gt; you can benefit from the power and the community creating the registries, by making a reference from your domain declaration to the registries. To support this we provide the attribute @datcat, defined via the namespace "http://www.iso.org/ns/DCR". This attribute can be used in &lt;feature&gt; and &lt;value&gt; elements. This can improve the usefulness of your corpus, thanks to a much better understanding of the annotations used. Example 13 shows the use of the @datcat attribute. e-mail: tiger2@lists.hu-berlin.de homepage: http://korpling.german.hu-berlin.de/tiger2/ HUBerlin-IDSL/INRIA</p><p>Example 12: referencing domains for annotation-name and annotation-value &lt;head&gt; &lt;annotations&gt; &lt;feature xml:id="f2" name="pos" domain="t"&gt; &lt;value xml:id="f2_1" name="PP"&gt;Personal pronoun&lt;/value&gt; &lt;/feature&gt; &lt;/annotations&gt; &lt;/head&gt; ... &lt;terminals&gt; &lt;t id="s1_t1" word="I" pos="PP"/&gt; &lt;/terminals&gt;</p><p>In example 13 we use a terminal covering the word "I", which is annotated by part-of-speech annotation having the value personal pronoun. The domain for the annotation name and annotation value is declared in the &lt;annotations&gt; element, as already seen in the examples above. But in this example we use the @datcat attribute to refer to the ISOCat system. The annotation name is not only declared by mentioning it in the &lt;tiger2/&gt; document, but also in the common registry. Therefore you do not necessarily need a description inside the &lt;value&gt; element, because it is given by the ISOCat entry, though &lt;tiger2/&gt; does not prohibit using both.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Using the @type attribute</head><p>If you need a finer granularity for the declaration of annotation domains, you can use the @type attribute inside the &lt;t&gt;, &lt;nt&gt; and &lt;edge&gt; element. As already mentioned in the section Typing of nodes and edges, this attribute on the one hand types the given element and on the other hand represents a correspondence to the declaration of the annotation-domain. The element &lt;feature&gt; also contains an optional @type attribute, with which you can constrict the set of nodes and edges using the annotation domain. Example 14 shows this mechanism.</p><p>In example 14 the domain of the annotation name for terminal "s1_t1" is defined by the feature "f2". The @type attribute guarantees that the feature only declares an annotation name domain for terminals of the type "wordform". A terminal without this type cannot be corresponded to in that e-mail: tiger2@lists.hu-berlin. Example 14: using the @type attribute for annotation domain declaration &lt;head&gt; &lt;annotations&gt; &lt;feature xml:id="f2" type="wordform" name="lemma" domain="t"&gt; &lt;value xml:id="f2_1" name="PP"&gt;Personal pronoun&lt;/value&gt; &lt;/feature&gt; &lt;/annotations&gt; &lt;/head&gt; ... &lt;terminals&gt; &lt;t id="s1_t1" word="I" type="wordform" lemma="I" pos="PP"/&gt; &lt;/terminals&gt; domain. If no @type attribute is given in the &lt;feature&gt; element, the domain works for all elements respecting the domain declaration (&lt;t&gt;, &lt;nt&gt; or &lt;edge&gt; elements).</p><p>As we already mentioned in the section Typing of nodes and edges, in &lt;tiger2/&gt; it is also possible to declare the domain for types. The mechanism to do so is the same as for declaring annotation values, namely via the &lt;feature&gt; and &lt;value&gt; element. Example 15 shows the declaration of the domain for types.</p><p>In example 15 we declared the domain for types, by adding an entry for the type "compound". Note that if you declare such a domain, it is not possible to have non-declared values in the @type attribute of the corresponding element (&lt;t&gt;, &lt;nt&gt; or &lt;edge&gt;). This enables the validation of the @type attribute. The default types "t" for domain t, "nt" for domain nt and "prim" for domain edge, are implicitly given and do not have to be declared explicitly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Grouping</head><p>Several graphs can be grouped by a segment, which is a semantic unit. For example, a segment can stand for a sentence, a paragraph and so on. A segment is represented in &lt;tiger2/&gt; via the &lt;s&gt; element. Such a segment must contain at least one graph, the upper limit of graphs is not bound. Example 16 shows the containment:</p><p>A corpus or sub-corpus (as described in the section Corpus-structure) can contain an unbounded number of segments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Corpus-structure</head><p>In &lt;tiger2/&gt; you can represent a whole corpus structure containing several sub-corpora in just one &lt;tiger2/&gt; document. But in each &lt;tiger2/&gt; document you can represent just one root corpus represented by the &lt;corpus&gt; element. The corpus element must specify the format version of the data using the @tiger_version attribute. A corpus structure or more precisely a subcorpus can be e-mail: tiger2@lists.hu-berlin.de homepage: http://korpling.german.hu-berlin.de/tiger2/ HUBerlin-IDSL/INRIA</p><p>Example 15: declaration of domain for the @type attribute &lt;feature xml:id="f3" name="type" domain="nt"&gt; &lt;value xml:id="f2_1" name="compound"&gt; a unit of text, which acts as a kind of word &lt;/value&gt; ...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>&lt;/feature&gt;</head><p>Example 16: grouping mechanism via &lt;s&gt; element &lt;s xml:id="s1"&gt; &lt;graph xml:id="s1_g1"/&gt; &lt;graph xml:id="s1_g2"/&gt; ... &lt;/s&gt; &lt;s xml:id="s2"&gt; &lt;graph xml:id="s2_g1"/&gt; &lt;graph xml:id="s2_g2"/&gt; ... &lt;/s&gt;</p></div>			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>http://www.tc37sc4.org/document.php?p=tc37sc4_list_total.txt&amp;search_text=SynAF&amp;project_category=on</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="2" xml:id="foot_1"><p>http://www.ims.uni-stuttgart.de/projekte/TIGER/ e-mail: tiger2@lists.hu-berlin.de homepage: http://korpling.german.hu-berlin.de/tiger2/ HUBerlin-IDSL/INRIA</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_2"><p>e-mail: tiger2@lists.hu-berlin.de homepage: http://korpling.german.hu-berlin.de/tiger2/ HUBerlin-IDSL/INRIA</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>created by using the &lt;subcorpus&gt; element inside the &lt;corpus&gt; element. @tiger_version is inherited by subcorpora and should not be specified individually for each subcorpus. The &lt;subcorpus&gt; element is a recursive structure and enables one to create an unbounded depth of subcorpora.</p><p>Example 17 shows the corpus-structure in &lt;tiger2/&gt;.</p><p>Example 17 shows a corpus "c1" containing in total 3 subcorpora. Two of them ("c2" and "c4") are directly contained in "c1", and "c3" is directly contained in "c2" and therefore indirectly contained in "c1".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Meta-annotations</head><p>A corpus or subcorpus can be annotated by meta-annotations. Using meta-annotations differs from the way nodes and edges are annotated. In the case of meta-annotations in &lt;tiger2/&gt; we give a fixed set of possible meta-annotations. Meta-annotations are limited to the header of a corpus or subcorpus. They can be identified by the enclosing element &lt;meta&gt;. These meta-annotations comes form the TigerXML-format and are usable for the &lt;corpus&gt; and the &lt;subcorpus&gt; element. The possible meta-annotations are the following ones: name, author, date, description, format and history. A meta-annotation is represented by an XML element with the same name, containing the value as text inside the element. Example 18 shows the use of meta-annotations. </p></div>			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
