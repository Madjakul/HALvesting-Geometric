<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">MultiLingual Information Society ELAN Deliverables WP3</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="1999">DECEMBER 1999</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<title level="a" type="main">MultiLingual Information Society ELAN Deliverables WP3</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="1999">DECEMBER 1999</date>
						</imprint>
					</monogr>
					<idno type="MD5">56B32397B16A6199555FF6BC25FC0159</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.7.3" ident="GROBID" when="2023-08-24T15:00+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Language resources</term>
					<term>Distributed systems</term>
					<term>Network</term>
					<term>User interface Language resources</term>
					<term>Distributed systems</term>
					<term>Network</term>
					<term>User interface</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The ELAN project is a distributed language resources system, offering access to existing resources to their potential users throughout Europe. In order to serve the electronic multilingual resource market, our task is to specify and elaborate a network of inter-connected resource servers. This document defines the technical specifications of each nodes that form the ELAN network: the user interface of the ELAN client; the resource servers and the network management unit.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>The ELAN Architecture Deliverables D3. <ref type="bibr">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Scope</head><p>One of the objectives of the ELAN project is to define a proper software environment through which it might be possible to access and/or distribute linguistic resources, which would be spread among different servers.</p><p>There are different reasons why to go about in this fashion.</p><p>First, it should be considered that there already exist several sites around the world (most of the European ones being represented in ELAN) which actually act as brokers for different types of linguistic resources. The idea emerging behind the sole period of the ELAN project is actually to be able to bring together the corresponding resources, in order to provide any user with a global access to these. In some cases this will lead to more coherence between these databases since redundancies might be detected or complementary resources (e.g. parallel texts) put into correspondence.</p><p>Second, the classical view of a centralized database containing all the information in a given domain is far from applicable to linguistic resources where, because of their intrinsic diversity (prose, theatre, poetry, newspaper articles, dictionaries, historical documents etc.), there is a need for them to be created and above all maintained at a place where there is the competence to do so. In particular, the encoding background adopted within ELAN, that is SGML (and its subset XML), allows one to continuously enrich documents with specific linguistic annotations like part of speech (POS) tags or proper names (to quote only two possibilities).</p><p>Finally, there can be specific constraints that can preclude some given resources to be deported to another site than the site which has originally created them. In particular, some of the partners within ELAN have specific agreements with publishers, which express strong conditions on the actual distribution of electronic files. It is thus more sensible not to take the risk of hampering the agreement by overly spreading the corresponding contents. In the case of the ELAN network, each resource is only accessible through specific queries which can thus be controlled as to their actual applicability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">User in mind</head><p>Still, from the user's point of view, there should not be much change in the way the resources are to be accessed, which means that whether there are one or several servers should be rather transparent to him. Of course, taking into account the short duration of our project, we will not supply, in the prototype to be delivered, the whole set of functions that an existing server such as, say, the one developed by Leiden, is currently able to provide its own users with. Transparency is thus to be understood with regard to existing different servers, not from the point of view of benefiting from all the possibilities of the different sites at the same time (at least for the duration of the project).</p><p>As we will see, adopting a distributed framework, as opposed to the classical view of a centralized database, induces several specific problems for which this deliverable is trying to provide some plausible answers. Among those, we will have to deal specifically with the problem of broadcasting queries to different servers and conversely combining the corresponding result sets. As an example, statistics can only be dealt with in our distributed architecture if part of the computation is kept on the remote servers' sides and part is carried out locally (on the access server).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Objectives</head><p>In the context presented above, the objective of Work Package 3 (Software and Network) can be seen as an attempt to validate the feasibility of a networked environment for accessing linguistic resources and put forward the main aspects on which it would be necessary to focus in the future.</p><p>Beyond that, and coherently with the general approach of the standards of the project, we have tried to base any proposal and/or implementation on existing (and even emerging) technologies (i.e. Java, Swing, CORBA, XML), so that to ensure some kind of durability to our work.</p><p>Precisely, the aim of this work package is to ensure a good synchronization between the different implementation tasks by providing a precise description of:</p><p>• the interaction scenario between the user and the network (through the local access point);</p><p>• the interaction between the different elements of the network;</p><p>• the interaction between the system components of Network Access as well as the interaction of Network Access with related work packages.</p><p>In particular, the task will have to put forward the actions to be taken to ensure the consistency of the different databases held by LR servers (users, meta-data, network configuration …), stating precisely when and in which condition the corresponding data are accessible and modifiable.</p><p>This deliverable (t0+3) is a report defining:</p><p>• the precise organisation of the user interface;</p><p>• the organisation of the network proper;</p><p>• the flow of information within the network;</p><p>• the organisation of maintenance and updating of Network Access components.</p><p>• The deliverable at t0+9 will be a software corresponding to a platform independent user client.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">General network organisation</head><p>The general purpose is to develop a client/server system which allows a user to contact one or more servers and select sub-corpora for querying, taking into account various access conditions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">A decentralized network -rationale</head><p>All tasks dealing with the user interface should be concentrated on the client side, while searching and other computationally intensive operations should be accomplished by the server. The network (see Figure <ref type="figure" target="#fig_0">1</ref>, "General structure of the ELAN network," on page 9) has the following characteristics:</p><p>• each server is an autonomous unit containing its own linguistic data;</p><p>• when a server receives a request he acts as a "broker" and transmit the request to other servers in the network which are known to it;</p><p>• one server is accessible to registered users through a general purpose Java-compatible web browser.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">A user interface -friendly</head><p>This interface should be designed with a non-technical user in mind. Technically advanced features should be available in an intuitive way. Although all system components will have their own interface, due to different functions, they must have the same "look and feel" (i.e. surface and behavior). This reduces the time the user needs to become acquainted with the network and contributes to the aspect of simplicity.</p><p>resources server resources server resources server</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ELAN Network client</head><p>This user interface will be implemented as a client at the level of which little, not to say no, linguistic resource processing is to take place (notion of thin client). Basically, the interface will allow a user to make his different queries and will display result sets according to some specific style-sheets associated with these.</p><p>The following design criteria should be adopted for the interface:</p><p>• it should be GUI-based ;</p><p>• its implementation should allow the user to choose its interaction language (in particular, any PAROLE or TELRI language has to be taken into consideration).</p><p>In case of an error the user should be supplied with clear information about the error and what he can do to correct it. If the error could not be corrected by the user (e.g., due to a software bug) the helpdesk is automatically informed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">And the users</head><p>To be in line with the idea of a decentralized network, we have consider that a given user should only have to be registered at one given site and that no central user database should have to be set up.</p><p>From the network point of view this has two consequences:</p><p>• each server should manage its own user databases, containing both the general user identification information and dynamic information related to session parameters (see section "NMU / SERVERS communication" on page 26) ;</p><p>• each time a query is broadcasted from an access server to a remote server, an identification tag (user id and authorization level) should be transmitted in order to evaluate the applicability of the query.</p><p>3 User client (Deliverable 3.1.1)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Introduction</head><p>Given the preceding architecture, any authorized user will be provided with an environment which will lead him along the following steps:</p><p>1. connection to a local server;</p><p>2. user identification;</p><p>3. choice of working servers. Given the list of available LR servers -available through the local server -in the network, together with their respective server profiles, the user will select those servers which may provide the proper resources or the proper services (tools) he wants to access ;</p><p>4. selection of a subset of resources. Through an iterative process of requests to the selected servers, the user will build up a virtual sub-corpus (i.e. By way of pointers to individual resources) upon which he will actually work ;</p><p>5. access to document content proper. The user specifies a query which is broadcast to the appropriate servers holding the data selected in the user's sub-corpus. The queries are transmitted after being translated into a Common Query Language -CQL -shared by all the servers in the network.</p><p>As a consequence, the ELAN project makes a distinction between two types of queries:</p><p>1. Resource Selection Query (RSQ). This type of query corresponds to step 4 above. Its interpretation is optimized as it accesses the index database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Content Access Query (CAQ).</head><p>This type of query corresponds to step 5 above. It represents a direct access to the document content.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">ELAN main services</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Connection to a local server</head><p>Within ELAN each individual server is responsible for the management of its own database of registered users. A common code of practice is to be shared between the servers belonging to the network to ensure a coherent verification scheme among them.</p><p>As a result, the first step in the user-client scenario is to connect to one's own access server by means of a web browser which then downloads the user client as an applet window. As shown in Figure <ref type="figure" target="#fig_2">3</ref>, "ELAN user's reception panel," on page 13. the applet gives access to the different ELAN services as described below.</p><p>As an alternative, it is also possible to download a client application and use it to connect to the network instead of using a browser. This is useful in two cases :</p><p>• the browser is not compatible with the ELAN system (very last versions of the usual browsers should be used.)</p><p>• the internet connection is slow and the time to download the client applet at every connection is very long.</p><p>During the process of sub-corpus selection, the access information of the documents is matched with the user's entry in the user registration. Access to the documents is provided accordingly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">User identification</head><p>In order for a user to connect to a server, he must follow an identification process. Identification is the process that a server executes to verify if a user is a registered ELAN user.</p><p>Each registered user will be identify with a unique login name and a secret password.</p><p>Guest access can also be granted depending of each server policy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">User registration</head><p>Registration is the process that all new users will have to follow in order to use an ELAN server as a registered user (see Figure <ref type="figure" target="#fig_1">2</ref>, "Users registration," on page 12). Obviously, registration is done by filling in a form. A login name and a secret password must be provided by the user. The server verifies that the selected login name is unique. The registration will be validated by the administrator of the local server. For this purpose, an administration interface will be also provided with each server of the ELAN network. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Client environment and interface</head><p>The ELAN client environment is made of a tabbed window where each tab grant access to a specific functionality.</p><p>The ELAN interface will offer the following functions :</p><p>• Selection of the working servers;</p><p>• Selection of working resources;</p><p>• Selection of tools which may be applied to resources in the shopping basket;</p><p>• Manipulation of the shopping baskets;</p><p>• Definition of the user preferences;</p><p>The client window is build as a "reception panel". Inside this panel, we have several other panels which may be selected by the way of a tabbed component. Each panel offers one of the functions enumerated above (see Figure <ref type="figure" target="#fig_2">3</ref>, "ELAN user's reception panel," on page 13)</p><p>The "Servers" tab allows a user to select the servers he wants to access. This panel is composed by a list of "referenced servers". For each referenced server, we indicate its name, its URL and its state (i.e., on-line or off-line). Thus, a user can dynamically select all servers corresponding to his needs.</p><p>The "Resources" tab allows a user to dynamically select all the resources he wants to work with using the "shopping basket" paradigm.</p><p>The "Tools" tab presents a set of tools that the user could use with his list of selected resources. These tools should allow "concordances queries", "word list queries" as well as "statistical queries". All tools are independent from one another, and a new tool can be added easily.</p><p>Finally, the two last tabs "Preferences" and "I/O" allow a user to respectively personalize his own environment (saving options, interface language etc.) and manage his shopping baskets (creation, deletion). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) The Workspace</head><p>In the ELAN system, the user should be able to save different kind of information or data for later use. A registered user probably does not want to select again his client interface language every time he connects to the network, or the servers or resources he usually works with.</p><p>As we see, there is a need for a private environment associated to each registered user. This is what is called the Workspace.</p><p>The Workspace is saved on the user's login server, and reloaded every time he connects to the network, so his private environment is automatically restored from one session to the other.</p><p>A Workspace usually contains :</p><p>• the environment preferences (see "the preferences panel" below)</p><p>• the list of selected servers (see "selection of servers" below)</p><p>• the user's saved resources basket (see "selection of resources" below)</p><p>Note that only registered users can have a private workspace, and can save it on the server. Guest users will use a "default" workspace, and won't be able to save it on the server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) Servers selection</head><p>Before any query session (resource selection), a user has the possibility to select among a set of online servers (see Figure <ref type="figure" target="#fig_3">4</ref>, "Servers selection panel," on page 14), the server(s) he wants to work with. At any moment of the process, the user can edit his list of working servers and modify it. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) Resources selection</head><p>The principle is to select resources from the various databases on the different servers, and to combine them in "shopping basket". The user has the possibility to query either the whole ELAN network or a subset of selected resources servers. The resource selection is based on the corpus documentation (meta-data i.e. the TEI headers) and enables the user to make some simple queries (on a single field) or multiple queries (combination of fields with Boolean expressions). For that purpose, the user will have access to a friendly query interface for editing, modifying and sending his queries to his local server.</p><p>Another way for the user to select his working corpora is to browse through the different sub-corpora available on the different servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>d) Tools and content query</head><p>As the main goal of this architecture is to give a user an access to a large set of resources, it is mostly important to provide an environment dedicated to the tools and content access. In these tools the user will be able to edit CQL queries and send them to the various servers referenced in his "shopping basket".</p><p>The interface will obviously depends on the type of query and results that are expected. To edit the CQL queries, two possibilities should be provided:</p><p>• A simple or basic querying environment for novice users based on a GUI interface, that will allow simple queries to be made with no special knowledge of the CQL language.</p><p>• More skilled users should have the possibility to enter a query by just typing it in the CQL language. Much more sophisticated queries exploiting the full power of the CQL could be made this way.</p><p>Various tools will be provided, ranging for mono or multiLingual concordances queries to statistical queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>e) Shopping baskets</head><p>Shopping baskets keeps the resources that the user has selected. A user can have several baskets with different resources, but only one basket can be active at a time.</p><p>The resource selection is made by way of the "shopping basket" paradigm : while the user consult the resources he wish to access, he puts them in his current "shopping basket".</p><p>Obviously, the shopping basket can interactively be modified and kept from one session to the other. All on-line operations are effectively realized on the shopping basket, that is, download operationswhen possible -, but also, all operations related to the tools which may be applied to the resources, for example, mono and multilingual concordances. These tools can be selected by means of the "Tools" tab.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Technical requirements and implementation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">XML for data and message encoding</head><p>In the framework of ELAN, all flowing data, (i.e. requests, results, messages, …), as well as all information about users and user's working spaces, will be encoded using XML (see W3C REC-xml-19980210).</p><p>It is right now usual to use the SGML (see ISO 8879:1986) standard for encoding language resources (see PAROLE, TELRI, Silfide, … projects). However, it has been observed, especially within the World Wide Web Consortium (W3C), that SGML was somehow too complicated to be -as such -a possible exchange format on the Internet. As a result, a subset of SGML -XML (which stands for eXtended Markup Language) -has been proposed (see W3C REC-xml-19980210). It is suggested to design the network infrastructure for linguistic resource distribution upon this new standard for the following reasons:</p><p>• XML is a proper subset of SGML and as such will be compatible with most SGML applications implemented so far;</p><p>• XML has been fully adopted by major software providers in the framework of next generation web browsers (in particular, Microsoft's Internet Explorer 5, Netscape's Communicator 5.0 and Sun's Project X), which will ensure platform independence for the ELAN network;</p><p>• XML provides an advanced linking mechanism (inspired by the TEI extended pointer mechanism) -the XML Pointer Language (see W3C WD-xptr-19980303) and the XML Linking Language (see W3C WD-xlink-19980303) -, which can be the basis for the identification of resources across the ELAN network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) Resource meta-data encoding</head><p>PAROLE recommendations for linguistic resource representation are based on the TEI guidelines, which is a document representation meta-language widely used both in the academic and the industrial fields. It may thus seem natural to base any definition of a document exchange infrastructure upon the same very language. Each resource available on the ELAN network will have an associ-ated documentation, also called meta-data. This information will be encoding using the PAROLE recommendations.</p><p>As the XML recommendation is a subset of the SGML standard, it should be noted that both CES and TEI encoded data could be readily transformed into XML data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) ELAN Workspace encoding</head><p>The ELAN workspace is in fact an XML document associated with a given user and which is stored on the local server between two given sessions in order to keep any information related to the user identification or activity. It basically comprises the following elements:</p><p>• Identification information about the user;</p><p>• the current server selection (only one selection is being considered and saved);</p><p>• the different sub-corpora (or "shopping baskets") selected by the user;</p><p>• a history of user queries to the server;</p><p>• possibly some other parameters such as personal word lists that the user would like to keep.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix B. "</head><p>The ELAN Workspace DTD" on page 99 presents a proposal of DTD for the ELAN workspace and Appendix C. "A simple workspace instance" on page 78 shows an elementary instance of such a workspace.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) Queries and results sets encoding</head><p>In ELAN, results sets as well as queries are valid XML document. As such, they can be considered as instances of DTDs. The various DTDs define the protocol used to build queries and results sets. All documents or messages exchanged within the ELAN Network are made of two parts :</p><p>• a "header" compliant to the SIL DTD and providing general information (user id, server id, etc...)</p><p>• a specific part compliant to a DTD depending on the document or message type (query, resultset, etc.) Specific APIs are provided to parse, build and more generally deal with these documents. The API documentation is available at the ELAN Software site: http://www.loria.fr/projets/MLIS/ ELAN</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>d)</head><p>The SIL DTD This is the general header associated with every document or message within ELAN. The information stored include:</p><p>• The document's type</p><p>• The id of the server that issued the document</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• The version of the DTD this document follow</head><p>• A user identification section that includes :</p><p>-the login and password (encrypted) of the user -the group(s) the user belongs to</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>e) The ELAN Query DTD</head><p>All ELAN queries are embedded in an &lt;elanQuery&gt; XML element, which content differ depending on the query type. A specific DTD has been defined for all query types.</p><p>Here is an example of a concordance query document: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>f) The Result sets DTD</head><p>In ELAN all results sets are basically made of two parts:</p><p>1. a meta part that contains general information about the results set. This includes:</p><p>-the total number of documents matching the query -the actual number of documents returned in this results set -eventually error messages issued by the servers 2. a results part that contains the differents results. Each result is basically made of:</p><p>-one or more lines of raw text -a set of attributes</p><p>The attributes names depends on the type of results. For example, in case of a concordance query results set, each result is made of 3 attributes:</p><p>• node contains the node word </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Software requirements</head><p>For the same reasons of platform independence, any new piece of software developed within the ELAN framework will be implemented in Java, a programming language which is getting the status of a de facto standard for Internet oriented applications. Among other aspects, it is possible to mention the following arguments for adopting Java:</p><p>• Java based Applets (i.e. Web based applications) will run on most existing Web browsers, thus keeping the software requirements as limited as possible;</p><p>• the "Servlet" API. A servlet is a server-side component, which in the context of HTTP, is the Java equivalent of CGI programs;</p><p>• Swing, which is a GUI component kit that simplifies and streamlines the development of windowing components. The Swing component set is part of a class library called the Java Foundation Classes (JFC);</p><p>• several XML parsers developed in Java (but not only!) are already available which will ease specific development dealing with PAROLE compatible data;</p><p>• internationalization, which is the process of designing an application so that it can be adapted to various languages and regions without engineering changes;</p><p>• Java comprises a treatment of Unicode [see ISO 10646] compatible data, making any software language independent;</p><p>• Java IDL, which adds CORBA (Common Object Request Broker Architecture) capability to Java, providing standards-based interoperability and connectivity. Java IDL enables distributed Webenabled Java applications to transparently invoke operations on remote network services using the industry standard OMG IDL (Object Management Group Interface Definition Language) and IIOP (Internet Inter-ORB Protocol) defined by the Object Management Group;</p><p>• Java can be interfaced, in particular, with C/C++ programming languages, thus ensuring compatibility with the software available at the different partner's sites.</p><p>In the framework of ELAN's user interface, several Java's API should be used, for example:</p><p>Using Swing may allow us to build high-level and high-quality GUI. As Swing is a 100% Java API we keep the benefits of portability, platform independence, etc. Swing components are said to be lightweight because they don't rely on user-interface code that's native to whatever operating system they're running on. In addition, with Swing´s "pluggable look and feel" (PL&amp;F) capabilities, we can make the windowing components take on whatever appearance and behavior we like. So, we can make them look and feel just like native components of the user's computer system, or we can give them a uniform cross-platform look and feel -that is, a look and feel that always has the same appearance and behavior, no matter what kind of system is being used.</p><p>We should note that using Swing implies that, web browsers used in the framework of ELAN, must be "Swing-compatible". At present, only Sun's HotJava is 100% Swing-compatible. In order for Netscape's Communicator and Microsoft's Internet Explorer to be Swing-compatible a "Java Plug-in" must be installed.</p><p>Also, it should be easy to see that Java's "internationalization" will allow us to offer to ELAN users the possibility of working with several PAROLE or TELRI languages: English, French, Italian, Spanish, German, Dutch, Swedish, Finnish, Danish, Greek, and Portuguese. It should be noted that, several Java classes can convert between Unicode and the set of character encoding presented on Appendix A. "JDK Supported Encoding" on page 73.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Statistical tests</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.1">Introduction and trade-offs</head><p>Working on textual resources does not only mean browsing through contexts centered on a given node word of expression. The ELAN network also has to provide users with the possibility to operate on the corresponding contexts, in particular through statistical tests that may designate for instance possible collocations associated with the node word. Still, there is a hard trade-off when considering where exactly in the general ELAN architecture such a computation should take place, because of the following constraints associated with the different elements relating a user with the resource he wants to work with.</p><p>First let us consider what information is needed for the statistical tests we contemplate here:</p><p>• Reference frequencies -the number of occurrences of a given word in the "whole" textual database. Depending on what is actually needed (by the user), these frequencies can be the combination of the occurrences of the word in all texts for all databases, or restricted to the texts which he has selected;</p><p>• Contextual frequencies -the number of occurrences in the concordance lines selected by the user.</p><p>• Positional information -in specific cases, it is important to know the contextual frequencies associated with the different positions one given word occupies around the node word.</p><p>• Total size of the reference database -the total number of tokens in the reference corpus as chosen to compute reference frequencies;</p><p>• Total size of the concordance lines -the total number of tokens within the set of selected concordance lines (from which contextual frequencies have been computed)</p><p>It should be noted that these different figures can be combined (summed up) when produced by different servers whereas it makes no sense to combine statistical scores such as t-score or mi-score.</p><p>Let us now consider the computational constraints inherent to the general organisation of the ELAN network and the associated conclusions that can be driven with regards to the implementation of statistical scores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.2">From the client side</head><p>• The user does not have to know necessarily where the resources he has selected come from. He should thus be able to choose a statistical test transparently on his selection;</p><p>• for the sake of efficiency, the concordance lines may not have been fully loaded on the user client and thus the contextual frequencies cannot be computed here.</p><p>Conclusion: the user client will solely visualize results which will be provided to it by its local server. It may only sort and threshold the corresponding tables (e.g. word x decreasing score x position) in an interactive mode.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.3">From the local server side</head><p>• The local server does not have all the data needed to compute a given score and it would be nonsense to download the whole concordance lines from remote servers to the local servers;</p><p>• on the contrary, it has the best position to combine information issued by remote servers to compute statistical scores;</p><p>Conclusion: the local server combines frequency tables which he queries to remote servers and provides the client with the proper statistical results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.4">From the remote server side</head><p>• The remote server can easily provide reference frequencies and reference corpus size for its own databases (which could even have been computed beforehand). For more specific reference frequencies, he should be provided with the list of resources from which these are to be computed;</p><p>• the remote server can also compute contextual frequencies and context size if it is provided with the proper references associated with the concordance lines (element identifiers or node word position + distance); Conclusion: the remote server computes all the basic frequencies which are needed for a given statistical score according to the queries it receives from the local server. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.5">The protocol retained within ELAN</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.6">Implementation</head><p>The preceding protocol for statistical information exchange will be comprised in the Java interface provided to the different linguistic resource server. The API for queries and results sets is available at the ELAN software site : http://www.loria.fr/projets/MLIS/ELAN 4 Organisation on the ELAN network (Deliverable 3.2.1)</p><p>(flow of information and management)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Organisation</head><p>The network architecture of ELAN is based on three major actors:</p><p>• The Users (or Clients) which have been described in the preceding sections.</p><p>• The Network Management Unit.</p><p>The NMU should be considered as the heart of the network, that is, the NMU allows to link all the servers which are connected to ELAN. The NMU also maintains a database of information related to these servers (i.e., names, addresses, description, etc.).</p><p>A simple Network Management Unit (NMU) must be implemented (see Figure <ref type="figure" target="#fig_4">5</ref>, "Overall ELAN network architecture," on page 23).</p><p>• The Linguistic Resources servers.</p><p>As mentioned before, this is a set of independent but associated LR servers. In particular, each server is an autonomous unit bearing its own linguistic data. These servers can act as :</p><p>-linguistic servers and answer queries sent to them.</p><p>-brokers which broadcast the queries to all referenced and selected servers of the Network. A server act as a broker for the users connected directly to him, that is, when he is in the position of the login server.</p><p>Given that each single server has to:</p><p>• know about the list of servers affiliated to the network, and</p><p>• be certified in some respect before being connected to the network. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Clients, Servers and NMU communication</head><p>Two main networking protocols are used within the ELAN network:</p><p>• HTTP for client/server and server/server communications</p><p>• CORBA for NMU/servers communications • For server/server communication, Java server-sided components known as servlets will be used (see Figure <ref type="figure">6</ref>, "working of Java Servlets," on page 24), while the communication between the LR servers and the NMU will implement CORBA, a distributed object paradigm (see Figure <ref type="figure" target="#fig_6">7</ref>, "general CORBA client-server architecture," on page 25)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Servlets</head><p>Servlets provide a Java solution to the problems usually associated to the development of serverside components to extend the functionalities of an HTTP server. Thus, it is a technology that can be used to build network systems based on the usual client/server paradigm.</p><p>Servlets are a good alternative to the CGI technology (Common Gateway Interface), and are a good answer to the issues associated to them. Among other problems, we can say that CGIs are not evolutive, they suffer of a lack of performances, etc. These problems are often linked to the fact that CGI are usually implemented in scripts languages like PERL... Servlets are implemented in Java, with all the advantages associated with this language, in particular portability. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">CORBA</head><p>CORBA is a technology from the OMG (Object Management Group) that can be used to specify and develop client-server applications using distributed objects.</p><p>In CORBA, the server implements objects that can be made available to clients wherever they are located on the network. The server "publish" its objects using a specific protocol, so these objects become "distributed objects". A client can then get references on these objects and use them as if they were local.</p><p>Three main components can be identified in a CORBA system :</p><p>• the IDL (Interface Definition Language)</p><p>• the ORB (Object Request Broquer)</p><p>• the Services (Naming, Security, Events, etc...) </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) The ORB (Object Request Broker)</head><p>The ORB is the main component of the CORBA architecture. It can be seen as the "bus" through which the objects are being distributed. To make the communication as transparent as possible to the application, the ORB must take care of several issues that include:</p><p>• find and instantiate objects on distant computers</p><p>• invoke the methods of a distant object</p><p>• transmit parameters when invoking methods, and be sure the data types are coherent between clients and servers.</p><p>• publish meta-information for the various objects available in an object repository</p><formula xml:id="formula_0">• etc.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) IDL (Interface Definition languages)</head><p>CORBA can be used with several differents programming languages. This is one of its most interesting characteristic. Now the representation of data on these languages can be very different, so we need a mechanism to specify objects interfaces independently from their implementation. This is the purpose of the IDL language.</p><p>IDL is an object-oriented language to specify distributed objects interfaces, independently from the language they are going to be implemented in. For example, in a CORBA architecture, this allows a Java client to use an object implemented in C++ on a server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) CORBA services</head><p>Depending on the implementation of the CORBA specifications, several services are available to the developer. The main services that should be available with all implementations are:</p><p>• the Naming service : This service is used by client to get references on objects. Servers associate a name in a specific name-space to all objects they publish, and client can retrieve objects references using the objects names that have been referenced.</p><p>• the Security service : Like in every distributed architecture, security in CORBA is a big issue. This service purpose is to control access to objects or methods of objects and be sure only authorized client can get references on distributed objects and call their methods. • the Events service : This service specify and implements an alternative to the classic clientserver model. It is build on the publisher-consumer model. In this model, a server generates an event with its associated data and clients consume the event when they get it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3</head><p>The Network Management Unit (NMU)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Role of the NMU</head><p>As stated in section 2 (General Network Organisation), the Network Management Unit (NMU) is the only persistent link between the different servers affiliated to the ELAN network. It has thus the following functions:</p><p>• it maintains the list of servers affiliated to the network, together with a general profile for each of them (containing the languages dealt with by the server, the categories of document it may provide (tagged/untagged texts, lexicons, ...). To this end, each server is described by its name, its address (URL), and a flag describing its current status;</p><p>• it should be able to answer any query from each server belonging to the network when they have to know the list of available servers, the information attached to them and their current status;</p><p>• it updates the local database of the LR servers (SDB) through the network, each time a change has been made to the network description or when something has changed on the part of a given server;</p><p>• it is accessible through a simple form-based GUI, to allow the person responsible for the network (the "network master") to add a new server, modify the characteristics of a given server and/or disconnect a server from the network. At this point, no automatic processing will be made form LR servers to NMU to ensure full control of the quality and coherence of the information ;</p><p>Because of its central position in the ELAN architecture, the NMU is subject to several constraints, which are to condition its implementation. In particular, it has to be reliable as to its content since it is in charge of providing each server with the proper information to make it communicate with the others.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">NMU / SERVERS communication</head><p>As indicated above, communication between the NMU and the LR servers will be implemented by using CORBA. As in all CORBA implementations, client/server communications are described by using the "Interface Definition Language" -IDL -.</p><p>Several implementations of the CORBA specification exists. Because it is free and completely implemented in the Java language, we decided to use the JacORB broker for the implementation of the ELAN NMU. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">IDL Description</head><p>IDL is a language used to describe client/server interaction. On the server side, IDL allows to describe the set of objects used by the server, as well as, their associated methods. On the client side, IDL is used as a guide which indicates what is the procedure that a client should follow to communicate with a server.</p><p>In ELAN, we suggest to use a single CORBA object -NMUServer -, which allows NMU/Servers communications. This object will be published on the Corba bus using the JacORB Naming Service. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.4">Firewalls</head><p>As a "typical" TCP/IP implementation, JacORB must reserve some ports, on the one hand to implement the ORB and, on the other one hand, to allow client / server communication.</p><p>Unfortunately, when using JacORB one can not select the ports to be used. When JacORB is started, it searches a free set of ports which are selected randomly. If ELAN would work by using an Intranet framework, this would not be a problem. Obviously, ELAN works on an Internet basis, so several LR servers may be part of a sub-network which is access-protected, because of evident security reasons, from the Internet. This protection is the firewall. The firewall may forbid the use of some ports, so in most cases client / server communication may not be possible. That is, JacORB may select a set of ports which may be accessed inside the sub-network, but not from the outside.</p><p>An evident solution would be to authorize all accesses to the computer where the NMU resides. Nevertheless, this solution should be quite hard to implement, because of security access restrictions that must be maintained in a sub-network.</p><p>So, in order to test a first prototype we have decided to develop an intermediate tool whose function is to allow all clients to communicate with the NMU, while respecting all security restrictions used in the sub-network. This tool is currently being implemented as a "demon" which waits for an UDP request issued by the NMU. When the request arrives, the demon connects to the NMU. When the connection between the NMU and the demon has been done, the demon has a reference on the distributed object NmuServer, that is, the demon becomes a client of the NMU server.</p><p>By using the UDP protocol, we can select one single fixed port to receive all requests. Port number 1130 has been selected (see Figure <ref type="figure">9</ref>, "Solving a firewall problem," on page 29). Obviously, the demon must be executed inside the NMU's server sub-network. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This chapter presents the communication scheme between Elan servers and clients. This includes :</p><p>• the general communication scenario.</p><p>• the API for querying the servers and transmitting the results sets to the end user.</p><p>• the development of a driver to implement the communication between a server and a specific database system. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.2">Protocols and languages used in ELAN</head><p>a)</p><p>The XML level</p><p>All information flowing through the network will be encoded in XML. The encoding system is defined by the ELAN's DTD (inspired from the Silfide Interface Language DTD). This DTD allows to encode user's working spaces (WS), requests on meta-data (QL), results for these requests (RS), and all information related to users (UI).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) The MIME level</head><p>Because of efficiency, in particular in the framework of broadcasting requests from a server to another, not all needed information is not presented in XML documents. In general on the Internet, data like sound, images, etc.,. are encapsulated on a MIME layer. MIME allows to assign a data type (i.e., content-type), as well as to encapsulate heterogeneous data on a single data flow called MIME/ Multipart: on a single channel, one single connection is enough in order to exchange multiple data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) The HTTP level</head><p>ELAN uses the HTTP protocol (like the whole Internet) as the main communication protocol. Using HTTP is extremely simple (two single Java instructions allow to open an HTTP connection. However, http is a "stateless" protocol. This implies that each time a new page is loaded, the user is effectively disconnected from the server and it keeps no information allowing to know who was the user and what he was doing.</p><p>1. The global scenario is:</p><p>2. Open the client/server connection;</p><p>3. send a request from the client to the server;</p><p>4. send a response from the server to the client;</p><p>5. close the client/server connection.</p><p>Thus, even after logging into a site, each page accessed must pass the user name and the password back to the server to verify the user's right to access the page. The client application (the browser) and the server application (the Web server) have no concept of local variables, local method calls, or objects. This problem is solved in part by using MIME/Multipart.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.3">General Scenario</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) Connection</head><p>The user connects to the network through one of the registered servers. He can connect either with a client application (he will need to provide the address of the server) or with an applet. The server the user is directly connected to is referred further as the "login server". This server will act as a gateway, and all data exchanged between the client and the network (the login servers or other linguistic servers) will pass through it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) Scenario</head><p>Once the user is connected to one of the ELAN servers, all the network traffic (queries and results) between this specific client and the network will pass through the "broadcast" servlet on the login server. The main purposes of this servlet are to :</p><p>• broadcast a query to all servers selected by the user.</p><p>• broadcast a query to all servers appearing in a resources basket.</p><p>• merge the results from the differents servers into one results set to be transmitted to the user (see SuperResultSet below).</p><p>• maintain a cache memory of the results associated with the queries, until they are explicitly closed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 10. broadcast of a query</head><p>The user sends a query to the login server's broadcast servlet which will act as a broker and transmit it to the other selected servers.</p><p>Considering that the communication is implemented above the HTTP protocol, and that we have a general API with a built-in cache system, allowing connection to a server and sessions management, the java code to connect to a server would be :</p><formula xml:id="formula_1">QueryConnexion co = new QueryConnexion(URL);(1) QueryStatement st = co.getStatement()<label>(2)</label></formula><p>QueryResultSet rs = st.sendQuery(CQL);(3)</p><p>(1) : QueryConnexion purpose is to initiate a communication with a server, by providing its address and the service we want to connect to, in the standard URL format used for HTTP connections.</p><p>(2) : Once the connection is instantiated, we ask for a "statement" object, that handle the sessions and cache systems. This class will be used to send a query, or close the session.</p><p>(3) : Using the statement object, a CQL query can be send. The sendQuery call will return a results set object, which can be used as a standard Java Enumeration to retrieve the results.</p><p>This scenario is used both for the "Client"/"Login Server" connection and the "Login Server"/"Other ELAN servers" connections. Both cases are illustrated in the following examples :</p><p>• The user applet connects to the Broadcast servlet, send a query(CQL) and gets the results set as an Enumeration. </p><p>QueryResultSet rs = st.sendQuery(CQL);</p><p>• The Broadcast servlet connects to the birmingham query servlet, send a query(CQL), gets the results set as an Enumeration and read the 10 first results. The main purposes of st (instance of the QueryStatement class) are :</p><p>• maintain a consistent connection between all components (user/BroadcastServlet and Broad-castServlet/QueryServlets) through a unique session ID (1 query=1 session id).</p><p>• store the result sets in a cache memory for as long as the session is valid.</p><p>A session remains valid until the user closes the connection or a time-out exception occurs.</p><p>The query is sent through the sendQuery method of the Statement class, which will return an Enumeration to read the entries from the results set, through the usual hasMoreElement() and nextElement() methods.</p><p>The nexElement() method returns one result at a time. It will do all that is necessary to retrieve the result from the results set, which means :</p><p>• for the client applet or application :</p><p>-returns the result directly from the local cache, if its there.</p><p>-contacts the login server and retrieves the next results.</p><p>• for the login server :</p><p>-returns the next results directly from the local cache, if they are there.</p><p>-contacts all servers involved in the current session, and retrieve the next results before to return them to the client.</p><p>The client connects to "Broadcast servlet" on the login server.</p><p>The login sever connects to the "Query servlets" on the resources servers.</p><p>As you can see in the general architecture schema at the end of this document, there are two levels of cache memory. One on the client applet or application and one on the login server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) Super Result Set</head><p>The Broadcast servlet will merge the result sets from all the elan servers that answered the user's query in a super results set. It is a class which purpose is to call the next() methods of the servers specific results sets, merge the data in a convenient way (i.e. build a new results set), and send it to the user. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>d) session ID</head><p>It is possible that the result of a query is huge and cannot be sent at once back to the user.</p><p>In that case, a subset of the complete result set should be sent, and the remaining parts should be sent only on user request. Now HTTP is a connectionless protocol, which means that we need a mechanism to specify that a first sendQuery(...) call and the following next(...) calls belong to the same context.</p><p>For example, when a user asks his login server for the next entries of a results set, the server needs to identify the user and figure out to which former query it refers. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.4">APIs</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) QueryResultSet</head><p>• booelan hasMoreElements() returns true if there's still results to be retrieved in this results set </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.5">The ELAN driver</head><p>Since the implementation of the linguistic databases is specific to each server, we need a mechanism to translate the CQL query into the language corresponding to the local database.</p><p>For this purpose, a common interface, the QueryHandler interface, is to be implemented by each server connected to the Elan network. This is the only part of the architecture to be developed specifically for a proprietary resources interrogation system. It will allow the communication between this system and the ELAN network.</p><p>In the ELAN scenario, the QueryServlet receives a query and transmits it to the QueryHandler driver which will connect to the local resources database, handle the query, and return the result as an ElanResultSet object.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) the QueryHandler Interface</head><p>An ELAN driver must implements the following interface : </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) Parsing an ELAN Query</head><p>The ELAN query is transmitted to the driver as a string containing an XML SIL document. It has to be parsed into an "ElanQuery" before to be used. See Appendix H. "Sample code of a "fake" Query-Handler driver" on page 91 to see how to do this.</p><p>The ElanQuery interface provides access to the ELAN query and allows to easily extract information from it. Its main methods are :</p><p>• short getQueryType() </p><formula xml:id="formula_3">returns</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>c) Parsing a resources basket</head><p>A "SILBasket" class is to be used to parse and extract information from the basket XML string that can be sent with a query. It can also be used to build a new basket object.</p><p>A basket is basically made of "resources" object, which are made of a SID (the server from which the resource come from), a IDNO (a unique resource identifier on the sid server) and eventually a set of display attributes (title, author, etc.).</p><p>The main methods of the "SILBasket" class are : -message is an optional message to be displayed to the user</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.6">Driver installation</head><p>The server preferences file ($HOME/xsilfide/silfide/preferences/ServerPrefs.xml) contains a set of attributes and their values. This file is read by the server when it starts, and should specify the name of your driver (complete package path) in the "driver" attribute :</p><p>Note that your CLASSPATH variable must contain a path to your driver implementation, so that the Java class loader can locate it.</p><p>Below is an example of a ServerPrefs.xml file, with the driver attribute (in bold) pointing to the QueryHandlerExample driver in the fr.loria package. &lt;prefs&gt; &lt;pref name="status" value="online"/&gt; &lt;pref name="name" value="chris2"/&gt; &lt;pref name="nmua" value="godefroy.loria.fr"/&gt; &lt;pref name="nmup" value="1130"/&gt; &lt;pref name="driver" value="fr.loria.QueryHandlerExample"/&gt; &lt;/prefs&gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Security Aspects</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.1">Introduction</head><p>Two kind of users can connect to the ELAN network : guest users or registered users. This mean that we need a mechanism to identify users and their right to access specific resources. For this purpose, a user database management system providing password protected connection and passwords encryption has to be developed, as well as a secure transaction layer to protect the communications between servers.</p><p>Two main security threats can be identified in the Elan architecture regarding secure and protected communications. We should :</p><p>• Control access to the NMU and especially to its administration methods.</p><p>• Secure the communications between servers (signature and/or encryption).</p><p>This basically means that we need to :</p><p>• Identify trusted clients on the NMU.</p><p>• Identify users on servers so only the authorized ones get access to protected resources.</p><p>• Make sure that no user can connect as someone else, in order to get specific privileges.</p><p>• Make sure that intercepting the data exchanged between servers is useless.</p><p>Our purpose in the next sections is to present differents methods that can be used to identify users at connection and secure transactions taking place in the network, either between resources servers or between these servers and the NMU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.2">Connecting to the ELAN Network as a registered user</head><p>To connect as a registered user, a login name and password has to be sent over the network so the server can identify the user and eventually allow access. Since it is pretty unsafe to send a password unencrypted over a network, this requires a mechanism to encrypt the password and ensure that intercepting it would be useless. This is the purpose of the OTP system.</p><p>OTP is for One Time Password and means basically that a password can be used only one time before to be invalidated. Thus, both the server and clients have to recalculate a new password for every new connection.</p><p>The password is calculated with two parameters : the secret key and the challenge key. The secret key is provided to both the server and the clients, but never transmitted upon the network, so it cannot be intercepted. The challenge key is a counter, which is incremented by the server after every connection. Before connecting, the client ask the server for the challenge key and with its secret key calculates the password to be transmitted. The server does the same and if the calculated passwords match when the client try to connect, the access is granted.</p><p>Controlling access to specific resources on specific servers involve the development of a real user database where users belongs to groups.</p><p>For example, the "guest" user would belong to a "guest" group with minimal access rights.</p><p>A registered user could belong to a group associated with a specific project and be allowed to access the corresponding resources.</p><p>The specification of such a user database management system is not this document purpose though...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.3">Securing access to the NMU</head><p>Some of the methods provided by the NMU IDL interface are used for administrating the NMU database, and so have to be protected in a way a fake client implemented by some untrusted people could not execute them, and so trash the NMU database.</p><p>Therefore, we have to implement a system allowing only trusted clients to call these methods.</p><p>Two options are available for securing access to the NMU. The first one, the CORBA Security service, is implemented as a standard CORBA service. The second one is based on a password system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) The CORBA Security Service (CSS)</head><p>As a distributed computing architecture, CORBA provide a security service, based on the Security Reference Model (SRM). The Object Management Group (OMG) identifies the following security threats to a CORBA System :</p><p>1. An unauthorized user of the system gaining access to information that should be hidden from him.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>A user masquerading as someone else, and so obtaining access to whatever that user is authorized to do, so that actions are being attributed to the wrong person.</p><p>3. Security controls being bypassed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>Eavesdropping on a communication line, so gaining access to confidential data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5.</head><p>Tampering with communication between objects : modifying, inserting and deleting items.</p><p>6. Lack of accountability due, for example, to inadequate identification of users.</p><p>In Elan, we are essentially interested in the fifth point. We want to allow access to administration methods of the NMU only to the administration clients. The other clients (the Elan servers) should never gain access to these methods, neither should any untrusted client. The following features are included in the countermeasures provided by the CSS system :</p><p>1. Controlling access to :</p><p>-an IDL interface.</p><p>-a subset of the implementations of an IDL interface.</p><p>-interface operations and collections of interface operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Identification and authentication of :</head><p>-the user to the CORBA system.</p><p>-the client to the target.</p><p>-the target to the client.</p><p>Though CSS provides exactly the kind of protection we need in Elan, it is not distributed with all CORBA Brokers... On the contrary, most of the free CORBA brokers implemented in Java implements a very thin subset of CORBA services, not including the security service.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) Password protected access to the administration methods</head><p>The second option consists of providing a crypted password as a parameter to any of the administration methods defined in the IDL interface. As a consequence, the code would actually be executed only if the right password is provided.</p><p>The two methods of the NmuServer class that should be protected this way are add and remove, which respectively allow adding and removing of Elan servers. They could be defined in the IDL this way :</p><p>boolean add(in string password, in string server_name, in string server_address, in string server_info); boolean remove(in string password, in string server_name);</p><p>To ensure that intercepting the password is useless to a third person, an OTP system can be used, and a simple method can be added to the NMU IDL interface to allow the transmission of the challenge key :</p><p>string getChallengeKey();</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.4">Securing Server-Server communications</head><p>The requests made to the Elan servers contains identification and authentification information that the servers use to determine whether the user is allowed to access the data he wants to.</p><p>The point is if untrusted users get this information (by listening the network for example), they can modify the request by hand and connect to the network as a trusted client, receiving access to the corresponding resources.</p><p>There is no way to ensure none would intercept the requests when they are transmitted from one Elan server to another, but we can make this information useless with encryption or signature technologies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>a) SSL (Secure Sockets Layer)</head><p>The protocol is composed of two layers. The lowest, on top of some reliable transport protocol like TCP/IP, is the SSL Record Protocol, used for encapsulation of various higher level protocols. One of these, the SSL Handshake Protocol, allows servers and clients to authenticate to each other and to negotiate an encryption algorithm and cryptographic keys before the application protocol transmits or receives its first byte of data.</p><p>SSL is well known on the Internet since it's usually used to secure transaction with the HTTP protocol, which in the above architecture is the application protocol.</p><p>The point is that not every HTTP servers implements this protocol, and that in Elan, we don't really need encryption but only authentification and integrity check of the messages being send between servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>b) S/MIME</head><p>S/MIME (Secure/Multipurpose Internet Mail Extensions) provides a standard way to send and receive secure MIME data. Based on the MIME standard, it provide the following security services :</p><p>• authentication</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• message integrity</head><p>• non-repudiation of origin, using digital signatures</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• data security using encryption</head><p>In Elan, the CQL is already encapsulated in a MIME MULTIPART document, which means it would be very easy to implements this protocol using probably only the signature feature.</p><p>An implementation of the S/MIME standard in the Java programming language is available at http:// jcewww.iaik.tu-graz.ac.at/ c) PGP Signature PGP (Pretty Good Privacy) is a public key encryption system. This means that it does not depend on the encryption key being kept secret for its security. The public key is used to encrypt messages and is distributed to any instance that would like to send a secure message. A separate key, known as the secret key, is used to decrypt messages. PGP can be used either to encrypt or only sign messages. Since encryption using PGP is forbidden in some countries including France, we should not use this feature in the Elan network, but signing a message using this system seems to be a good solution. PGP encryption and signature features have been coupled with the MIME standard and is known as the PGP/MIME system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The ELAN Client user's guide</head><p>Deliverable D3.1-2 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Introduction</head><p>The ELAN network's purpose is to merge into one virtual database various linguistic resources spread among different systems, and provide a common way to query them and retrieve results.</p><p>To do so, an easy to use client application with a user-friendly interface has been developped.</p><p>Using the ELAN network implies to follow a few steps :</p><p>• Connect to one server of the network either using the application client or the applet available on the login server's homepage.</p><p>• Select the servers to be queried.</p><p>• Select documents or corpora to work with by :</p><p>-querying the servers -choosing resources -adding them in a "resources basket".</p><p>• Perform content queries on the selected documents (currently only corcordances queries are supported)</p><p>resources server resources server resources server</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ELAN Network client 6 Connection to a server</head><p>The ELAN client is entirely developped in the Java programming language, which means that you can use it with any Java enabled operating system and computer. This includes a PC with Windows 95/98 or NT, PC with Linux, a Macintosh with MacOS or LinuxPPC, or any UNIX workstation.</p><p>Whatever system you are using, you will have to install a Java Virtual Machine, as well as the Swing Components (used for the user interface design).</p><p>Two configuration can be used :</p><formula xml:id="formula_4">• JDK 1.1.6 minimum with SWING 1.1.x • JDK 1.2</formula><p>If they are not already installed on your system, you can find these components as well as the installation instructions at Sun's web site : http://java.sun.com</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Connection through the applet</head><p>If you have a swing enabled web browser, you can start the ELAN client as an applet directly by connecting to one of the servers referenced on the ELAN network.</p><p>Just point your browser to one of the server by entering its URL and follow the instructions on the page.</p><p>You will find a link to start the applet as a guest, or you can enter a login name and password to connect as a referenced user. Note that in that case you must first have been referenced on this server as a member. Please contact the server administrator to do so.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Connection with the client application</head><p>As an alternative it is also possible to download and install an ELAN client on your computer. The main advantage compared to the applet is that the connection will be faster since the required classes are locally installed on your computer, and don't need to be downloaded everytime.</p><p>This is also the only way to work with ELAN if you don't have a Swing enabled Web browser.</p><p>To dowload the clients installers, point your browser to one of the ELAN servers and download the client suitable for your system. Three client installers are available for Windows 95/98/NT, Macintosh and Unix systems.</p><p>When you start the client, you will be prompted to enter the login server address, and eventually a login name and password if you want to connect as a registered user. Leave these fields blank if you want to connect as a guest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">The Workspace</head><p>In the ELAN system, the user should be able to save different kind of information or data for later use. A registered user probably does not want to select again his client interface language everytime he connects to the network, or the servers or resources he usually works with.</p><p>As we see, there is a need for a private environment associated to each registered user. This is what is called the Workspace.</p><p>The Workspace is saved on the user's login server, and reloaded everytime he connects to the network, so his private environment is automatically restored from one session to the other.</p><p>A Workspace usually contains :</p><p>• the environment preferences (see "the preferences panel" below)</p><p>• the list of selected servers (see "selection of servers" below)</p><p>• the user's saved resources basket (see "selection of resources" below)</p><p>Note that only registered users can have a private workspace, and can save it on the server. Guest users will use a "default" workspace, and won't be able to save it on the server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">The User Interface</head><p>The ELAN client user interface is divided into three main zones :</p><p>• the top zone contains several tabs to browse through the various panels.</p><p>• the main center zone contains the currently selected panel.</p><p>• the botton zone is a status line to display extra informations, errors or messages sent by the servers.</p><p>The various "panels" are independant and allows selection of resources servers, querying of servers, basket management, user interface preferences selection etc.</p><p>The interface is available in several languages. Curently English, French, German and Dutch are supported.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">The welcome Panel</head><p>You see this panel when you first launch the client application or applet. It just informs you that you are connected to the ELAN network, and allows you to quit with the "Close" button.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Selection of servers</head><p>This panel displays a list of all servers referenced on the NMU (Network Management Unit), that is, all servers you can contact through the ELAN network.</p><p>For each server, the following information is provided :</p><p>• the server's name</p><p>• the server's address on the internet (as a standard URL)</p><p>• the server's availability</p><p>• a short description of the server and its content</p><p>The last column of the servers table display the servers availability:</p><p>: the server is online and ready to answer queries.</p><p>: the server is down and no queries will be sent to it.</p><p>The information box below the servers table will display the profile of a specific server, depending on the position of the mouse cursor. Move it over the servers table to get information about the servers.</p><p>You can select a server simply by clicking the corresponding line in the servers table. The selected server will be added to the servers section of your workspace.</p><p>You can also select or unselect all servers respectively with the "select all" and "unselect all" buttons. Multiple selections are allowed through "shift-click" and "control-click".</p><p>All following queries will be sent to the selected servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Selection of resources</head><p>Before to be able to send content queries, the ELAN scenario involves a phase of documents or subcorpora selection. All documents will be saved as references in the current basket, which will later be sent with every content query. This is done through 3 differents panels :</p><p>• A panel to send header queries and select individuals documents depending on their author, title or language.</p><p>• A panel to get a list of sub-corpora from the selected servers.</p><p>• A panel to display documents or sur-corpora references and add them in the current basket.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3.1">Header queries (selection of documents)</head><p>Here you can ask the selected servers for single documents references matching your query.</p><p>You have two ways for building your query:</p><p>• by directly typing your CQL query in the query text field.</p><p>• by using the graphic interface to build a query based on "titles", "authors" and "languages" attributes.</p><p>The query helping interface is made of a list of criteria and two button "+" and "-" on the right part to add or remove criteria. Each criteria contains 3 parts:</p><p>• a pop-up menu to choose the criteria attribute (title, author or language).</p><p>• a pop-up menu to choose an operator.</p><p>• a text field to enter the value the criteria should match, considering the selected operator.</p><p>After building your query with the graphic interface, you can preview it by clicking the "Query" button left to the query text field.</p><p>Note : The formalism used to build a query from the graphic interface might not be supported by some servers. In that case no results will be returned. Since this system is still under development, consider that typing directly your query or using only sur-corpora references is safer.</p><p>Once the query is completed, the client will automatically switch to the "resources selection" panel to display the results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3.2">Get all corpora query</head><p>This panel is made of a single "Get all corpora" button that will send a request to all selected servers so they return a list of references for all sub-corpora they can handle.</p><p>Eventually, a single reference representing the complete server's corpus will be returned. Adding such a reference to the current basket means that content queries will apply on the whole server's corpus.</p><p>Once the query is completed, the client will automatically switch to the "resources selection" panel to display the results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3.3">Documents selection</head><p>The document selection panel is basically divided in 3 parts :</p><p>• A botton line displays information about the current results set, that is the number of hits corresponding to the query and the number of documents or sub-corpora references actually displayed.</p><p>• The left part displays the documents references corresponding to the header query.</p><p>• The right part displays the content of the current basket, which will be sent with any further content query.</p><p>You can select documents by clicking on them, and you can use as usual "shift-click" and "controlclick" for multiple selection.</p><p>Add documents in your basket simply by selecting them in the left list and clicking the "&gt;" button between the documents list and the basket content list. The selected documents should appear in your basket content list on the right.</p><p>The "Next" button is used to display the next "results shown" results, if too many results have been returned to be displayed at once.</p><p>The "Close" button closes the current session and deletes the current results set.</p><p>The "Remove" button under the basket panel removes the selected documents from the current basket.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">The tools panel</head><p>This panel presents differents tools to work with the resources saved in the current basket.</p><p>Queries will be sent to servers depending on the content of the current basket.</p><p>Though many tools might be available in the future, only a concordance line tool is provided currently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4.1">Concordances queries</head><p>This tool allows you to send concordances queries in the CQL (Common Query Language) format.</p><p>Type your CQL query in the top text field and send it using the "Send" button. The status line will display a message to inform you that the query is being sent and processed.</p><p>The concordances lines will be displayed in a table, and centered on the node word, with left and rights contexts at both sides.</p><p>The bottom text zone displays extra information about a specific concordance line (document's title, author, language etc.). Just click on a concordance line to see this information.</p><p>Finally, the bottom line shows information about the result set being displayed :</p><p>• "Number of records" is the total number of hits of your query with the current basket.</p><p>• "Results shown" is the actual number of results displayed. You can retrieve the next results by clicking the "Next" button.</p><p>• The last zone displays the range of results being displayed from the current results set.</p><p>The "Next" button will retrieve the next "results shown" results from the current results set. You can specify in the "results shown" field the number of results you want to retrieve.</p><p>The "Close" button ends the session, and delete the current results set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.5">The preferences panel</head><p>This panel allows you to configure your environment. Three parameters can be configured :</p><p>• you can choose if the client starts with a new basket at each connection or if it starts with a new empty basket.</p><p>• you can choose the language for the interface (English, French, German or Dutch)</p><p>• you can choose how and when your workspace will be saved on the server Note that the workspace (including your resources basket, servers selection and environment preferences) will be saved on the server for the next session only if you are a registered user.</p><p>Nothing will be saved on the server if you are connected as a guest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.6">The i/o panel</head><p>This panel allows you to manage your resources baskets . Using this tool, you can :</p><p>• create a new empty resources basket</p><p>• delete the resources baskets</p><p>• reload baskets (make active saved basket)</p><p>All resources baskets are saved in the Workspace document.</p><p>Using the "Save Workspace" button, you can also save your workspace (including your resources basket, servers selection and environment preferences) on the server, if you are connected as a registered user.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The ELAN Server installation manual</head><p>Deliverable D3.2-2 &lt;pref name="driver" value="fr.loria.silfide.driver.QueryHandlerEmptyImpl"/&gt; ELAN driver name : modify this to provide access to your site driver. Note that your CLASS-PATH variable must contain a path to the driver.</p><p>&lt;pref name="namingContext" value="ELAN"/&gt; the naming context to be used to connect on the NMU. (should not be changed) &lt;pref name='nmuConnectMode' value='corba'/&gt; protocol to be used to connect to the NMU. Can be either "corba" to connect directly or "udp" to use the udp gateway.</p><p>&lt;pref name='broadcastTimeout' value='3'/&gt; this attribute specifies the time-out (in minutes) the broadcastServlet will use when contacting a resource server. After this delay, the connection will be cancelled.</p><p>&lt;pref name='serverPort' value='8888'/&gt; specify here the port your server will use. This value must match the silver.port property in the httpd.properties file.</p><p>&lt;pref name='guestAccess' value='yes'/&gt; should be "yes" if you want to allow guest connections to your server.</p><p>12 A user-friendly configuration tool...</p><p>In the silfide/bin directory, launch ./admin to start the configuration tool. Its purpose is to edit the different properties and configuration files. Note that you shouldn't modify any properties but those described in this document.</p><p>You can edit a property by double clicking on its key or value. You should then be able to edit it and validate your changes by hitting the return key. Note that for some properties, you cannot modify the key. Sometimes you wont be able to add or remove any properties from the file, but only edit the actual properties values.</p><p>The interface is basically made of tables displaying the properties from the various files, and accessible through tabs.</p><p>Some buttons allow the administrator to add and remove properties, and validate the modifications :</p><p>• Add : add a new property to the file. You must enter the key and value of the new property in the new line that will appear in the table.</p><p>• Remove : remove the selected property from the file.</p><p>• Apply : validate the modifications and save them in the property file. Note that for the modifications to take effect, you must restart the server.</p><p>Below are some screen shots of the administration tool : You should be able to see the server's homepage at http://server.where.com:port where "server.where.con" is the address of your server and "port" the port you decided to use.</p><p>You can use any Swing enabled browser to connect to the homepage and launch the applet either as a guest or a registered user.</p><p>If you dont have a swing enabled browser, you can launch the ELAN client either as an applet using the AppletViewer tool or an application.</p><p>To connect with the applet as a guest :</p><p>appletviewer http://server.where.com:8888/servlets/ConnectServlet</p><p>To connect with the applet as a registered user :</p><p>appletviewer "http://server.where.com:8888/servlets/ConnectServlet? LOGIN=login_name&amp;PASSWD=asasasasasasasa"</p><p>To connect using the application : java fr.loria.silfide.client.WorkspaceApplication you will have to provide the server address, a login name and a password. Leave the login and password fields blanks to connect as a guest.</p><p>-orjava fr.loria.silfide.client.WorkspaceApplication server_url login_name password</p><p>The ELAN common query language (CQL) </p><formula xml:id="formula_5">Deliverable D3.3-1</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="15">Foreword</head><p>The CQL described in this document can be regarded as a maximum model. Although all the software partners involved with implementing the CQL will do the utmost to be completely compatible with the described CQL, small differences between the partners can remain. These differences are due to the use of pre-existing software brought into the ELAN project. Differences are described in the user documentation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="16">Introduction</head><p>This document describes the ELAN Common Query Language (CQL).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="16.1">What is the ELAN Common Query Language and why is it needed?</head><p>The ELAN project aims to make parts of the PAROLE and TELRI corpora available for retrieval via the Internet. For various reasons, it was decided not to create a new retrieval system. Instead, existing systems had to be reused in the context of the ELAN project. A number of institutions has been found willing to cooperate in the process of making their corpus retrieval software available for this purpose.</p><p>The existing systems have more or less comparable functionalities; however, they differed in the way in which the user had to interact with them -i.e., formulate queries, perform statistical tests, view output. ELAN aims to overcome these differences by realizing a common query language and a common user interface by using standard components. The common user interface will be based on Java and Internet browser technology, esp. the Netscape Navigator and Microsoft Internet Explorer platforms.</p><p>For this user interface to be able to "speak" to the various retrieval engines, a common language has to be defined. The language that will translate the ELAN query language into the command syntax for the various query systems is called the ELAN Common Query Language.</p><p>The institutions that make their retrieval engines available for use within the context of ELAN are:</p><p>1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>LORIA UMR 7503 CNRS, INRIA &amp; Universités de Nancy</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2.</head><p>University of Birmingham, Department of English, School of Humanities, Birmingham, United Kingdom</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>3.</head><p>CNR -Istituto di Linguistica Computazionale, Pisa, Italy</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>Instituut voor Nederlandse Lexicologie (Institute for Dutch Lexicology), Leiden, The Netherlands</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="16.2">Design objectives</head><p>The design objectives for the ELAN Common Query Language are:</p><p>1. simplicity -the language should be easy to use 2. power -the language should allow non-trivial queries, like adjacency queries, part-of-speech queries, boolean combinations and so on 3. if there is a conflict between the power concept and the simplicity concept, simplicity wins 4. implementability -it should be possible to translate CQL expressions into the local query format of all ELAN retrieval systems 5. even being easy to use, the language should permit the creation of a wizard-like interface that helps the user formulate a query -in some circumstances even a simple language requires some special notation, for instance when looking for: part-of-speech tags (PoS tags) words separated by a given number of other words discrimination between uppercase and lowercase characters SGML markup etc.</p><p>6. the language should support hierarchically structured documents, marked up with SGML 7. this support of SGML should not be dominant -users unaware of markup should not be forced to think about it, let alone be confronted with SGML.</p><p>Despite the identical user interface and common query language, different concepts in the various retrieval program may cause subtle differences in query results. For instance, the Leiden approach is based on retrieving sets of phrases (Leiden jargon for paragraphs or sentences), whereas, e.g., the Birmingham approach is based on retrieving positions in the corpus where the match is found. One of the consequences of the Leiden approach is that searching for words will never cross phrase boundaries: where the Birmingham system silently crosses such boundaries during the match, the Leiden system will not. This can, in some circumstances, result in different output.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="17">Components of the ELAN Common Query Language</head><p>In this section we will discuss:</p><p>The context of a query Features supported in the ELAN Common Query Language</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Query syntax</head><p>Before we describe the features and the syntax of the language, we will provide list of example queries. We hope that this will make the rest of this document easier to read.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Find all occurrences of real example real example</head><p>Find some forms of the verb ski</p><formula xml:id="formula_6">ski | skies | skiing | skied &amp; V</formula><p>Find some forms of the verb sky near a noun from the list ball, &amp;painting or picture (where near means: within a distance of 5 words to the left or the right): Advanced: combining case-sensitive and case-insensitive matching (note: normally, case sensitivity applies for the whole query, and is a feature selectable in the user interface) -the Nobel Prize for linguistics or Linguistics (or LINGUISTICS, etc.) caseless(linguistics) 3:3 Nobel Prize</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="17.1">The context of a query</head><p>A query is always made within a certain context. For an ELAN query, this context consists of:</p><formula xml:id="formula_7">corpus selection.</formula><p>The corpus to be queried, or a subset of a corpus type of the query.</p><p>contextual (e.g., concordance lines) statistical (miscore, t-score) parameters relevant for the given query type, e.g.: case-sensitivity of the query (default is case sensitive matching, a lowercase a does not match an uppercase A) output parameters for the concordance lines type of statistical test to be performed optional header query .</p><p>The header query operates on the TEI headers of each document in the selected corpus. If there is a match, the document corresponding to the TEI header is included in the corpus to be queried by the text query (see below); if there is no match, the corresponding document will be excluded.</p><p>If no header query is present, the entire (sub)corpus selection will be used.</p><p>More on header queries in section 3.1 below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>text query.</head><p>The text query performs the actual query. It operates on the documents defined by the corpus selection, possibly modified by the header query. The processing of the results depends on the type of the query: either output is sent back to the user, or statistical tables are generated on which the statistical test can further operate.</p><p>When the user wants to perform a query, the entire context will be passed from the client in the web browser to the servers defined for the given corpus selection. The context will be represented in the form of an XML Document Type Definition (DTD), a draft version of which is given in Appendix A.</p><p>The argument of caseless() is interpreted as if it were a literal word or a wildcard. Hence, caseless(*ily) will match all words ending in ily, uppercase as well as lowercase.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>regex()</head><p>The result will be a list with all words in the current corpus selection that match the regular expression string passed as argument. The regular expression string will need to match from the start of a word upto its end. For instance, the result of regex([Tt]h.) could be a list consisting of The, the, Tho, tho, Thy and thy. The result will not contain words like ethic or than.</p><p>If the user has indicated that the overall setting for the query is to match case-insensitively, the regex() function will also be case-insensitive.</p><p>The regular expression variant to be used will be Unix-style regular expressions.</p><p>Combinations of a part-of-speech tags and a word are used to search for a combination of a word and a PoS tag. It is not possible to search for the combination of a word and an SGML tag (see below), or for the combination of an SGML tag and a PoS tag. It is possible to search for a PoS tag only -i.e., a PoS tag corresponding to an arbitrary word.</p><p>PoS searches consist of a word, a PoS operator and a PoS tag.</p><p>Instead of a word one can also use one of the alternatives listed above (wildcards, lists of alternative words, functions).</p><p>The PoS operators are: * and. The and operator indicates that the second operand should also match on the same position in the corpus as the first operand. A typical application of the and operator would be a word with a certain PoS tag.</p><p>The and operator specifies that the word or words to the left of the operator should be below a &lt;W&gt; SGML tag whose attribute matches one of the PoS tags that are to the right of the operator.</p><p>* and not. The and not operator inverts the effect of the and operator: if the and operator would match, the and not operator will fail, and vice versa.</p><p>A PoS tag is a morphosyntactic tag as defined for the Parole corpus. Like a word, a PoS tag can be:</p><p>-a sequence of characters that together constitute the start of a PoS tag.</p><p>-a wildcard that will match the start of a PoS tag (wildcards for PoStags have the same notation as those for words) -a list of alternative tags (also using the same notation as for words)</p><p>Matching behaviour for PoS tags will be different than that of words: where a word (or word wildcard) must match entire words in the corpus, PoS tags (or PoS wildcards) only need to match the start of PoS tags in the corpus. This definition was done for convenience, because the Parole tags are to a large extent hierarchically structured with the leftmost character being most significant. Thus, the user can ask for a PoS V (for verb), without having to worry about any other characters that may follow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SGML tag.</head><p>If the corpus supports SGML tags, they can be queried. SGML tags can be expressed as:</p><p>* a literal string. A tag that complies with SGML conventions * a wildcard. In SGML tags, wildcards are only allowed in the attribute values, not in tag names or attribute names.</p><p>If any attributes are given within an SGML tag, the order in which they are given is irrelevant for the match. An SGML tag in the corpus that has more attributes than specified in the query expression will match nevertheless.</p><p>All matching is case sensitive, unless a global property of the query is changed. This property can be changed within the user interface and will be passed to the server as one of the parameters of the query context as described in section 2.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>multiple-word expression.</head><p>Multiple-word expressions are combinations of the single-word expressions defined above.</p><p>juxtaposition. Two single-word expressions next to each other in the expression specify that a match should be found in the corpus where these words (tags, etc.) are adjacent. Words are adjacent if the first word is immediately to the left of the second word, where any intervening tags are ignored (but intervening punctuation is not ignored).</p><p>span . The span operator indicates that two multiple-word expressions should occur within a given distance from each other. The span operator can specify the size of the distance and whether the expressions should occur in a left-to-right order or in any order.</p><p>If SGML tags are used among the multiple-word expressions, there will be no attempt to make sure that an open SGML tag and a closing tag belong to each other. If matching tags are required in the expression, refer to the section about hierarchy expressions (below).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hierarchy expression.</head><p>Given the fact that many corpus texts to be supported in ELAN are heavily tagged with the TEI tagging system, the CQL provides a means to combine a search for words with a search for the hierarchical structure of these documents. For instance, one may search for a word that is below a TEI &lt;HEAD&gt; tag. Users may formulate their searches in terms of words and tags, but apart from that, they may also want to express that some hierarchical relation between the tags should exist.</p><p>Hierarchy expressions find an important application in the area of header queries. For example, the user may want to select documents published in1995 by searching for a &lt;DATE&gt; tag that is below a &lt;PUBLICATIONSTMT&gt; tag, where the string 1995 is found within the domain governed by the &lt;DATE&gt; tag.</p><p>Due to conceptual differences, the Leiden server will have restrictions for text queries that search for word combinations that cross the boundaries of a phrase (e.g., a paragraph) or the header.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="17.3">Query syntax</head><p>The full syntax of query expressions is described in appendix B.</p><p>In this paragraph, we will provide the actual notation for the features that were discussed in section 2.2.</p><p>Between words and operators, all whitespace (blanks, spaces, tabs) is ignored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>single-word expression.</head><p>Single-word expressions are word expressions (including part-of-speech tags) and SGML tags. PoS tags can only occur in combination with words (or with the * wildcard, which stands for any word) word expression. A word expression is a literal word, a wildcard, a list of alternative words or a function that represents such a list of words. A function consists of a name followed by a number of parameters. The parameters are given between round parenthesis and are separated by commas. The name of the function is a sequence of unaccented letters in the ascii range defined by a..z and A..Z. The parentheses should follow the name without intervening whitespace. Function names and parameters are case sensitive. Function parameters are made of any characters, except whitespace, commas and round parentheses. If necessary, these should be escaped with a back slash \. Alternatively, and perhaps more conveniently, function parameters may be enclosed within quotes. In that case, the same rules apply as for quoted words, with the difference that functions define their own interpretation of parameters (e.g., caseless("wh*") matches all words starting with wh, Wh, WH, wH, while regex("wh*") will match words like w, wh, whh, and so on). See Appendix C for a description of the interpretation of function arguments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>*</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Examples of functions: flex(house)</head><p>This would (perhaps, depending on the corpus) be equivalent to the list house | houses. Note that a server need not necessarily have a flex() function; depending on the language, a server may offer different variants of flex() in order to deal with language-specific phenomena.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>regex("[aeiouy]+")</head><p>This would be equivalent to the list of words that consist only of vowels. Note that regex([aeiouy]+) is allowed as well, since none of the characters is special.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>caseless(house)</head><p>This would (perhaps, depending on the corpus) be equivalent to the list of all lowercase and uppercase variants of the word house, e.g. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>part-of-speech tag</head><p>A PoS tag obeys to the same rules as a word. For convenience, a PoS tag is implicitly extended with a * wildcard character. This was done for convenience, so that the user can enter The word dictionary with a tag N, followed by any character, etc, * &amp; A | R Any word with a PoS tag starting with A or R.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SGML tag.</head><p>An SGML tag is enclosed within angle brackets &lt; and &gt;. The normal SGML notation applies, so, for instance, a slash / following the &lt; indicates a closing tag.</p><p>Within attribute values, the wildcard characters _ * and \ have the same interpretation as within words. Wildcard characters are not allowed within element or attribute names.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>multiple-word expression.</head><p>Multiple-word expressions are combinations of the single-word expressions defined above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>juxtaposition.</head><p>Two single-word expressions can be combined by putting them next to each other, with intervening whitespace.</p><p>Examples of juxtaposition: central heating * &amp;A * &amp;A * &amp;N : two adjectives followed by a noun span.</p><p>The span operator will match the single-word or juxtapositional expressions that surround it. The syntax of the query language forbids more than one span operator in an expression. This was decided in order to prevent a combinatorial explosion when translating the ELAN Common Query Language to the local format.</p><p>A span operator consists of two numbers separated by a colon :. The span operator operates on two sequences of one or more words -one sequence to the left (S L ) and one sequence to the right (S R ). The numbers in the span operator define the distance between S L and S R in words. The distance between two words is defined as follows: if all words in a text are numbered, the distance of two words is the number of the rightmost word minus the number of the leftmost word. This implies that two adjacent words have a distance of 1 and that a distance of 0 is not possible between two words.</p><p>the first number of the span operator defines the distance between S L and S R if S R is positioned to the left of S L the second number defines the distance between S L and S R if S R is positioned to the right of S L</p><p>As an example, the query draws attention is identical to the query draws 0:1 attention.</p><p>When counting intervening words, SGML tags are disregarded; punctuation is counted as words.</p><p>Note: the exact definition of word and punctuation will be defined by the tokenization strategy of each Elan server -this implies that there may be some variation between servers.</p><p>Examples of a span: draws 1:3 attention would match: draws attention draws my attention draws his sister's attention attention draws but not:</p><p>draws more than my attention (the distance between draws and attention is 4, not 3) attention and draws (distance is 2, not 1)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hierarchy expression.</head><p>During the development of the CQL, all partners agreed about the features of the CQL. Also, notational issues were for the largest part agreed upon. However, a consensus about the syntaxis of hierarchy expressions has not been reached. Two notations have been proposed, one by Leiden and one by Birmingham. Rather than discussing the two approaches in detail, we will try to show the difference by means of a number of relevant examples. A final choice still has to be made, where, among others, aspects like notational comfort will have to be taken into account. 18 Processing CQL queries</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="18.1">Text queries and header queries -what they do and how they cooperate</head><p>Queries are applied to a set of corpora or subcorpora available on one or more ELAN servers. The user defines this set by selecting from a list of available corpora. This list is composed from the corpora and subcorpora available at all ELAN servers for which the user is authorized.</p><p>For some applications, users may want to further refine the selection made from the standard list. For instance, the granularity of the list may allow selection of newspapers published in a given year, but the user wants to limit his domain to all articles written on fridays (perhaps because at that day papers always have articles from a certain category).</p><p>In order to do so, the user can query the TEI header of the various documents in the selected corpus -this is done by so-called header queries. If a header matches the user's query, the document to which the header belongs is included in the current subcorpus selection. Of course, documents of headers that don't match are excluded.</p><p>It will be clear that the effect of header queries and text queries is different: header queries select documents text queries select a context -say, a concordance line -in the corpus Nevertheless, the query language for both queries is identical. This is because both header and content are made up with SGML tags. Of course, the header query facility will not be available for documents that do not have a header. Likewise, text queries on documents without SGML markup will not be able to specify SGML tags, PoS tags (which are represented as SGML tags) and hierarchy expressions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="18.2">Glue</head><p>A full description of context in which text queries and header queries are transmitted to an ELAN server (which may broadcast edited copies of them to other ELAN servers) is outside the scope of this document. Nevertheless, in order to obtain an understanding on how an ELAN server will process a query, a few words need to be said about it.</p><p>The ELAN user interface will wrap the user's text query (and the optional header query) in an XML document -this is transparent to the user, it's just part of the protocol by which the client (user interface) and the server talk to each other. This document will also contain other information -for details, please refer to section 2.1.</p><p>Part of the entries in the XML document is the kind of operation that is to be performed -type of the query in section 2.1. The following types have currently been envisaged: output a set of concordance lines (context size will also be specified in XML terms). The format of the output will be an XML document that the user interface understands sothat it can do formatting and highlighting in the user interface. output a table with statistical information (type of statistical test and parameters will also be supplied). This table, formatted as an XML document, will be formatted by the user interface output larger context given a certain id (the id corresponds to a position in the corpus) output a list of words matching a given regular expression output the frequency of a given word, also given a certain (sub)corpus selection.</p><p>Part of the protocol will originate from the server instead of from the user interface -for instance, if a corpus selection spans corpora that are distributed over several servers, one server will be responsible for merging the results coming from other servers. As another example, in order to do statistical computations, the responsible server may need to know the frequency of a word and ask that to the appropriate server.</p><p>The surrounding protocol has not yet been fully established. For example, the client may request that certain concordance lines are removed from the result set (filtering). A user may want to do that once it becomes apparent that a query contains several easily identifiable examples that are beside the point and would disturb statistics. Filtering the output may be more convenient that rephrasing the query.</p><p>Issues like this are part of the surrounding protocol and not part of the CQL proper. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This document describes the hardware and software requirements for ever site in order to act as a server within ELAN. We should also note that informations such as the name of a server or as the list of the subcorpora to be used, are not included in this DTD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. The ELAN Workspace DTD</head><p>Instead, this kind of information will be encoded </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. General structure of the ELAN network</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Users registration</figDesc><graphic coords="13,173.59,308.97,290.00,264.48" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. ELAN user's reception panel</figDesc><graphic coords="14,164.95,338.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Servers selection panel</figDesc><graphic coords="15,164.95,238.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Overall ELAN network architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Figure 6. working of Java Servlets</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 .</head><label>7</label><figDesc>Figure 7. general CORBA client-server architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure</head><label></label><figDesc>Figure 9. Solving a firewall problem</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>the complete HTTP communication scheme in ELAN can be seen in Appendix. It shows the various components and the data streams.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 .</head><label>11</label><figDesc>Figure 11. broadcast of a query and merging of the results in a super results set</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>•••</head><label></label><figDesc>QueryStatement getStatement() returns a new QueryStatement object (i.e. a new session) QueryResultSet sendQuery(String query) send a CQL query • QueryResultSet sendQuery(String query, String basket) send a CQL query with a resources basket (in XML format) QueryResultSet sendQuery(String query, Vector servers) send a CQL query and a list of server (sid) to which the query should be sent • String getSessionID() returns the session id • void close() close the session</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>a new query on the whole corpus (typically to get references to // the documents matching the query and build a basket) public ElanResultSet executeQuery(String sessionID, String CQLQuery); // starts a new query with the documents referenced in the basket public ElanResultSet executeQuery(String sessionID, String CQLQuery, String basket); // gets the next entries of the result set if the context was too big to // send it all at once with the executeQuery call. executeQuery(...) with // the same sessionID should have been called before. public ElanResultSet next(String sessionID);// close the session identified by the session number "sessionID" public void close(sessionID); } An example of implementation of a "fake" driver is available in Appendix.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>the type of the query. It can be : QUERY_WORDFREQ : word frequency query QUERY_WORDLIST : word list query QUERY_CONTEXT : context query QUERY_STATS : statistic query QUERY_CONC : concordance query QUERY_HEADER : header query • String getHeaderQuery() returns the header query (CQL) or null • String getTextQuery() returns the CQL query</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>••</head><label></label><figDesc>Resource getResource(String sid, String idno) returns the resource identified by this sid/idno couple, or null Resource.getSId returns the resource sid Resource.getIdno returns the resource idno • boolean containsResource(String sid, String idno) returns true is the resource identified by sid/idno is in this basket • int getSize() returns the number of resources in this basket • Enumeration getResources() returns an Enumeration for browsing through the resources in this basket. building : • boolean addResource(String sid, String idno) add a resource to the basket (without any attributes) • boolean addResource(String sid, String idno, Hashtable attrs) add a resource to the basket with some display attributes in a hashtable • Resource removeResource(String idno, String sid) remove the resource identified by the sid/idno couple from the basket d) Building an ELAN results set The ElanResultSet Interface can be used either to extract results from an existing results set or to build a new one. It allows easy manipulation of XML results sets documents that conforms to the DTD in Samuel Cruz-Lara's document "Result Sets in ELAN". The ElanResultSetImpl class implements the ElanResultSet interface. An instance of ElanResultSetImpl should be returned by the executeQuery(...) and next(...) methods of the QueryHandler implementations. The methods in the ElanResultSet interface are : Parsing : Enumeration getRecords() Initializes a Result Set (as an enumeration) • getSize() returns the number of results in this set • getTotalsize() returns the total number of results matching the initial query • String getResultType() returns the type of the results set • toString() returns the results set as a string (XML format) • int[] getErrorCodes() returns the error codes in this result set • String[] getErrorTexts() returns the error texts in this result set • String[] getErrorSids() returns the ids of the servers that issued the errors Adding results : • void addAttribute(String name, String value) add an attribute to a results set • void addRecord(String sid, String idno, String data, Hashtable attributes) • void addRecord(String sid, String idno, String data) • void addRecord(String idno, String data, Hashtable attributes) • void addRecord(String idno, String data) • void addRecord(String idno, Hashtable attributes) add a single result element to the results set (a record element) -sid is the server unique identifier on the network -idno is the resource unique identifier on the server -data contains raw data as a string or null -attributes contains a set of attributes stored in a hashtable. • void addRecord(String record) add a new record element to the results set • void setTotalSize(int ts) set the total number of results matching the query • void setResultType(String type) set the result type Adding Errors : • void addError(String sid, int errorCode, String message) • void addError(String sid, int errorCode) add an error message to the results set -sid is the server unique identifier on the network -errorCode is the code of the error (-1 is the generic error code)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 12 .Figure 13 .</head><label>1213</label><figDesc>Figure 12. Edition of the ServerPrefs.xml file</figDesc><graphic coords="68,164.95,399.48,308.00,230.40" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>sky | skies | skied | skying &amp; V 5:5 picture | painting | ball &amp; N Find questions (trick: search a question mark at the end of a sentence): ? &lt;/S&gt; Find all words that start with house: house* Advanced: regular expression search -color or colour regex(colou?r)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head></head><label></label><figDesc>walk &amp; N if the PoS tag for walk really is something like Ncfs--. Instead of a PoS tag, one may also use: -a wildcard. Wildcard characters in PoS tags obey the same rules as those for words. -a quoted word (See above) -a list of alternative PoS tags. A list of alternaive PoS tags has the same format as a list of alternative words. Examples of somewhat elaborate use of PoS tags: dictionary &amp; N_[-m*][sp]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>&lt;</head><label></label><figDesc>/Silfide//DTD SIL Work Space 0.5 Draft 19990106//EN" --&gt; &lt;!ELEMENT ws (prefs,basket+,servers,histos?)&gt; &lt;!ATTLIST ws crdate CDATA #IMPLIED update CDATA #IMPLIED&gt; &lt;!ELEMENT prefs (pref*)&gt; &lt;!ELEMENT pref EMPTY&gt; &lt;!ATTLIST pref name CDATA #REQUIRED value CDATA #REQUIRED&gt; &lt;!ELEMENT basket (resource*)&gt; &lt;!ATTLIST basket name CDATA #REQUIRED&gt; &lt;!--name : name of the database ??? --&gt; &lt;!ELEMENT resource EMPTY&gt; &lt;!ATTLIST resource idno CDATA #REQUIRED sid CDATA #REQUIRED&gt; &lt;!--href : hypertext reference URL/URI --&gt; &lt;!--key : index key in the database --date :a date in ISO standard form (yyyy-mm-dd) --&gt; &lt;!--]&gt; --&gt;C. A simple workspace instance&lt;sil type="workspace" version="0.5" sid="loria"&gt; &lt;uid type="user"&gt; &lt;login id="chris"yes" name="AutoSave"/&gt;&lt;pref value="fr" name="lang"/&gt; &lt;pref value="0" name="MinutesSave"/&gt;&lt;pref value="yes" name="EndSave"/&gt; &lt;pref value="last" name="StartBasket"/&gt; &lt;/prefs&gt; &lt;basket name="ressources de birmingham"&gt; &lt;resource idno="Elan-LOB" label="Elan-Corpus sample 1" idType="subcorpus" description="Test Corpus for ELAN" sid="birmingham" size="1188240"/&gt; &lt;/basket&gt; &lt;basket name="mes resources"&gt; &lt;resource idno="Elan-LOB" label="Elan-Corpus sample 1" idType="subcorpus" description="Test Corpus for ELAN" sid="birmingham" size="1188240"/&gt; &lt;resource idno="/xuapar/data/validated/book.ankhher/vidal.val" title="Spectrum van regressie en reïncarnatie" author="Henry de Vidal de St . Germain" comments="no" sid="leiden" language="Dutch" size="unknown"/&gt; &lt;/basket&gt; &lt;basket name="new"/&gt; &lt;basket name="resources de leiden"&gt; &lt;resource idno="/xuapar/data/validated/book.ankhher/liekens.val" title="NLP en spirituele ontwikkeling" author="Paul Liekens" comments="no" sid="leiden" language="Dutch" size="unknown"/&gt; &lt;resource idno="/xuapar/data/merged/jnljun95.selected_for_elan" title="NOS Journaal juni 1995" author="anonymous" comments="no" sid="leiden" language="Dutch" size="unknown"/&gt; &lt;resource idno="/xuapar/data/merged/jnljul95.selected_for_elan" title="NOS Journaal juli 1995" author="anonymous" comments="no" sid="leiden" language="Dutch" size="unknown"/&gt; &lt;/basket&gt; &lt;servers&gt; &lt;server sid="godefroy"/&gt; &lt;server sid="leiden"-Typical usage: &lt;!DOCTYPE sil SYSTEM "http://www.loria.fr/projets/XSilfide/dtd/sil.dtd"-SIL Module declaration --&gt; &lt;!ENTITY % SIL.ws SYSTEM "ws.dtd"&gt; &lt;!--PUBLIC "-//Silfide//DTD SIL Work Space 0.5 Draft 19990106//EN" --&gt; &lt;!--SYSTEM "http://www.loria.fr/projets/XSilfide/dtd/ws.dtd" --&gt; %SIL.ws; &lt;!ENTITY % SIL.ui SYSTEM "ui.dtd"&gt; &lt;!--PUBLIC "-//Silfide//DTD SIL User Information 0.5 Draft 19990106//EN" --&gt; &lt;!--SYSTEM "http://www.loria.fr/projets/XSilfide/dtd/ui.dtd" --&gt; %SIL.ui; &lt;!ENTITY % SIL.ql SYSTEM "ql.dtd"&gt; &lt;!--PUBLIC "-//Silfide//DTD SIL Query Language 0.5 Draft 19990106//EN" --&gt; &lt;!--SYSTEM "http://www.loria.fr/projets/XSilfide/dtd/ql.dtd" --&gt; %SIL.ql; &lt;!ENTITY % SIL.rs SYSTEM "rs.dtd"&gt; &lt;!--PUBLIC "-//Silfide//DTD SIL Result Set 0.5 Draft 19990106//EN" --&gt; &lt;!--SYSTEM "http://www.loria.fr/projets/XSilfide/dtd/rs.dtd" --&gt; %SIL.rs; /Silfide//DTD SIL Result Set 0.5 Draft 19990106//EN" --&gt; &lt;!ELEMENT rs (meta, result)&gt; &lt;!ELEMENT result (record)*&gt; Pieter Masereeuw, Patrice Bonhomme, Samuel Cruz-Lara * Date : 1999-05-05 * Status: By way of experiment, setting the scope for further discussions. * Changes: the following query types have been modified: -concordance type, -context type, -word list type, and -word frequency type.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_19"><head></head><label></label><figDesc>into the MIME part of a "query".* To do:The list of statistical tests is incomplete, as is probably the list with query types. of context words left/right of center word. necessary, the type of the parameter, as defined by the type of statistical test. headerQuery and textQuery.The IDString is an id by which a server can send back a larger context than just a concordance line (the size is defined by the left and right attributes). The exact format of the id is server-specific; the client can only use values that were supplied earlier by the server (for example, as hyperlinks/anchors -note that the client should store the server name as well as the id. Also note that the subcorpora attribute of the (only) &lt;server&gt; tag will be ignored -the id should be sufficient. Finally, note that some servers (e.g.Leiden) may want the id to contain information about the (position of the) server words for the context attributes to be meaningful -fortunately,all this stuff is of no concern for the client as long as it stores the id. list query type.The wildCard contains a regular expression or a CQL expressionfor which all matching words should be returned in a tabular format, with or without frequency information. All frequencies are given relative to the current (sub)corpus selection. be a CQL or a regular expression.Does anybody remember in what situation is this word listgoing to be used ??? for which the frequency is to be returned. The frequency is given relative to the current (sub)corpus selection. is a CQL expression that uses the TEI header for subcorpus selection.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="2,136.82,48.30,331.20,269.76" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="50,169.23,358.31,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="51,164.95,290.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="53,164.95,206.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="54,164.95,86.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="55,164.95,256.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="57,164.95,146.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="58,164.95,86.97,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="58,164.95,509.57,308.00,201.60" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0"><head></head><label></label><figDesc></figDesc><graphic coords="69,164.95,88.98,308.00,230.40" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0"><head></head><label></label><figDesc>-1 and D3.2-1</figDesc><table><row><cell>1 Introduction</cell><cell></cell></row><row><cell>Project Number</cell><cell>MLIS-121</cell></row><row><cell>Project Title</cell><cell>European Language Activity Network (ELAN)</cell></row><row><cell>Deliverable Number</cell><cell>D3.1-1 and D3.2-1</cell></row><row><cell>Work Package ID</cell><cell>WP3</cell></row><row><cell>Contractual date of delivery to EU</cell><cell>31 December 1999</cell></row><row><cell>Actual date of delivery to EU</cell><cell>17 December 1999</cell></row><row><cell>Deliverable Title</cell><cell>The ELAN Architecture</cell></row><row><cell>Authors</cell><cell>Christophe de Saint-Rat</cell></row><row><cell></cell><cell>Samuel Cruz-Lara</cell></row><row><cell></cell><cell>Patrice Bonhomme</cell></row><row><cell></cell><cell>Laurent Romary</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5"><head></head><label></label><figDesc>NMUServer" within the "ELAN" naming context. Every resource servers will have a retrieve a reference on this object to get information about the network or a specific server (addresses, status, etc.) Below is the IDL description of the NMU server object.</figDesc><table><row><cell cols="2">status check ELAN server It's name is "module nmu resources database</cell><cell>NMU administration</cell></row><row><cell>{</cell><cell>NMU client</cell></row><row><cell cols="2">query broadcast enum Status {online, offline}; driver</cell></row><row><cell cols="2">query parsing typedef sequence&lt;string&gt; serverList;</cell></row><row><cell></cell><cell>SIL management</cell></row><row><cell cols="2">users database management interface NmuServer</cell><cell>corba ou udp</cell></row><row><cell>{</cell><cell></cell><cell>corba</cell></row><row><cell cols="3">boolean add(in string name, in string address, in string info);</cell></row><row><cell cols="2">boolean remove(in string name);</cell></row><row><cell cols="2">boolean isUpdate(in string name);</cell></row><row><cell cols="2">serverList getList();</cell></row><row><cell cols="2">HTTP string getAddress(in string name);</cell></row><row><cell cols="2">string getInfo(in string name);</cell></row><row><cell cols="2">Status getStatus(in string name);</cell></row><row><cell>};</cell><cell></cell></row><row><cell>};</cell><cell></cell><cell>NMU</cell></row><row><cell></cell><cell cols="2">corba ou udp</cell></row><row><cell cols="2">ELAN server</cell></row><row><cell>resources database</cell><cell>status check</cell></row><row><cell></cell><cell>NMU client</cell></row><row><cell>driver</cell><cell>query broadcast</cell></row><row><cell></cell><cell>query parsing</cell></row><row><cell></cell><cell>SIL management</cell><cell>HTTP</cell></row><row><cell></cell><cell>users database management</cell></row><row><cell></cell><cell></cell><cell>-web browser (applet)</cell></row><row><cell></cell><cell></cell><cell>-client application</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10"><head></head><label></label><figDesc>The ELAN server package is available as a "tar.zip" file that you can decompress with the following commands:This will create an xsilfide directory that contains everything to start a new server. The JacORB corba broker and the Java servlets API are included in the release, but you have to install a JDK and the swing components separately. port of the NMU server. Should not be modified but on NMU administrator request.</figDesc><table><row><cell cols="3">users/ 10 The XSilfide archive the users profile servlets/ the various ELAN servlets &lt;pref name="nmup" value="1130"/&gt;</cell></row><row><cell cols="2">workspaces/</cell><cell>the users workspaces</cell></row><row><cell cols="2">security/</cell><cell></cell></row><row><cell>otp/</cell><cell>unzip xsilfide.tar.zip</cell><cell>contains the classes for the «one time password»</cell></row><row><cell></cell><cell>tar -xvf xsilfide.tar</cell><cell>autenthification system</cell></row><row><cell cols="2">serverAdmin/</cell><cell>contains the server administration application</cell></row><row><cell cols="3">The xsilfide directory is organized as follow :</cell></row><row><cell>lib/</cell><cell></cell><cell></cell></row><row><cell cols="2">sxp.jar</cell><cell>XML parser</cell></row><row><cell cols="2">xlink.jar</cell><cell>xLink support</cell></row><row><cell cols="2">xpointer.jar</cell><cell>xPointer support</cell></row><row><cell cols="2">client.jar</cell><cell>the client applet and application</cell></row><row><cell cols="2">Project Number server.jar query.jar</cell><cell>the server classes MLIS-121 communications between servers and clients</cell></row><row><cell cols="2">Project Title util.jar</cell><cell>European Language Activity Network (ELAN) various utility classes to be used in the architecture</cell></row><row><cell cols="2">Deliverable Number silfideall.jar</cell><cell>D3.2-2 complete archive with all the classes</cell></row><row><cell cols="2">Work Package ID</cell><cell>WP3</cell></row><row><cell cols="2">Contractual date of delivery to EU nmu/</cell><cell>31 décember 1999 packages to access the NMU</cell></row><row><cell cols="2">Actual date of delivery to EU lib/ Deliverable Title jacorball.jar Authors nmu.jar</cell><cell>17 décembre 1999 the JacORB CORBA broker The ELAN Server installation manual Christophe de Saint-Rat package to connect to the NMU with CORBA</cell></row><row><cell>silver/</cell><cell></cell><cell></cell></row><row><cell cols="2">classes/</cell><cell>the classes for the Silver HTTP server</cell></row><row><cell>lib/</cell><cell></cell><cell></cell></row><row><cell></cell><cell>silver.jar</cell><cell>the Silver HTTP server jar file</cell></row><row><cell></cell><cell>servlet-2.1.0.jar</cell><cell>the Java Servlet API version 2.1</cell></row><row><cell>silfide/</cell><cell></cell><cell></cell></row><row><cell>bin/</cell><cell></cell><cell>scripts to start the server (for UNIX and WINDOWS)</cell></row><row><cell cols="2">cache/</cell><cell>contains the cache files when the server is running</cell></row><row><cell cols="2">classes/</cell><cell>the Java classes (equivalent to lib/silfideall.jar file)</cell></row><row><cell>dtd/</cell><cell></cell><cell>the DTDs for the various XML documents</cell></row><row><cell cols="2">htdocs</cell><cell>the home of the server</cell></row><row><cell></cell><cell>index.html</cell><cell>the ELAN server homepage</cell></row><row><cell></cell><cell>jars/</cell><cell>jars files for the client applet</cell></row><row><cell cols="2">icons/</cell><cell>icons for silver</cell></row><row><cell cols="2">images/</cell><cell>images (ELAN logo etc.)</cell></row><row><cell>lib/</cell><cell></cell><cell>empty...</cell></row><row><cell cols="2">logs/</cell><cell>the silver server logs files</cell></row><row><cell cols="2">preferences/</cell><cell>the server configuration files</cell></row><row><cell cols="2">properties/</cell><cell>the silver properties files</cell></row><row><cell cols="2">realms/</cell><cell>not used</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12"><head>word. literal word for</head><label></label><figDesc>CQL purposes, a word is defined as a sequence of non-blank characters, with the exception of the following special characters: Searching character entities, like &amp;eacute; for é, is not supported. Instead, all characters should be entered in their Unicode (ISO 10646) representation (wysiwyg (what you see is what you get): users need not bother with character entities, they only work with real printable character). Unicode characters will match the corresponding character entities in the corpus data. The user interface will somehow have to provide a facility for easily entering special characters.If a literal word or wildcard contains many special characters, it is more convenient to enter them within quotes. Within quotes, all special characters mentioned above (under literal word) become not-special. However, the wildcard characters (_, * and \, see above) keep their wildcard interpretation.The user may use single quotes as well as double quotes -the only requirement is that the start and the end of the string have the same quote. Within double quoted strings, single quotes can be freely entered; likewise, a single quoted string may contain double quotes. For a detailed discussion, see Appendix C.</figDesc><table><row><cell cols="2">Examples of quoted words and wildcards:</cell></row><row><cell>&amp; means and (see below)</cell><cell></cell></row><row><cell cols="2">~&amp; means and not (see below). * "I'm". same as I\'m</cell></row><row><cell cols="2">| means or (see below) * '2.5"'. 2.5 inch; same as 2.5\"</cell></row><row><cell>: part of span operator * "AT&amp;T". same as AT\&amp;T</cell><cell></cell></row><row><cell>&lt; and &gt; delimit SGML tags</cell><cell></cell></row><row><cell cols="2">( and ) mark functions; also reserved for future use (hierarchy expressions) * I'*. Words starting with I', same as I\'*</cell></row><row><cell cols="2">" and ' used for quoted words and quoted function parameters (see below) * '\*\*\*-hotel'. same as \*\*\*-hotel -probably not a hotel where you want to go with four little</cell></row><row><cell cols="2">^Reserved for future use (in hierarchy expressions) children</cell></row><row><cell cols="2">* '\'', "\"". even the absurd may be entered</cell></row><row><cell>list of alternative words</cell><cell></cell></row><row><cell cols="2">A list of alternative words consists of literal words, quoted words and/or wildcards, separated</cell></row><row><cell>by a vertical bar character |.</cell><cell></cell></row><row><cell>Examples of literal words: Examples of alternatives:</cell><cell></cell></row><row><cell>cat house | houses</cell><cell></cell></row><row><cell>dog *ity | *ness</cell><cell></cell></row><row><cell>élan</cell><cell></cell></row><row><cell cols="2">Note that the original CQL definition had no facility to enter a word between single or double quotes. Quotes were mainly introduced in order to make it easier to enter special regular function</cell></row><row><cell cols="2">expression characters in the regex() function. Other uses of quoted strings are their for</cell></row><row><cell>reasons of orthogonality.</cell><cell></cell></row><row><cell>wildcard</cell><cell></cell></row><row><cell cols="2">The following wildcard characters are also special, but may be part of a word, where they</cell></row><row><cell>have a special interpretation:</cell><cell></cell></row><row><cell cols="2">_ (underscore) matches an arbitrary character</cell></row><row><cell cols="2">* matches zero or more arbitrary characters. An * by itself means: any word.</cell></row><row><cell cols="2">\ makes the following character not-special, eg. \&amp;,\_ or \\.</cell></row><row><cell>Examples of wildcards:</cell><cell></cell></row><row><cell>*</cell><cell>any word</cell></row><row><cell>un*</cell><cell>words starting with un</cell></row><row><cell>*able</cell><cell>words ending in able</cell></row><row><cell>un*ily</cell><cell>words starting with un and ending in ily</cell></row><row><cell>AT\&amp;T</cell><cell>The AT&amp;T company</cell></row><row><cell>quoted words</cell><cell></cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13"><head></head><label></label><figDesc>house | House | HOUSE. All inflected forms of the stem house that have a PoS tag starting with N (note: the flex() function is example-only)</figDesc><table><row><cell>regex("koning(in)?")</cell></row><row><cell>Matches the Dutch words koning (king) and koningin (queen). Note that you can't write</cell></row><row><cell>this as regex(koning\(in\)?) (as this would match the 'words' koning(in and koning(in) -</cell></row><row><cell>note: parentheses are correct!</cell></row><row><cell>* combination of a word and a part-of-speech tag.</cell></row><row><cell>part-of-speech operator</cell></row><row><cell>The PoS operators are:</cell></row><row><cell>&amp; for the and operator</cell></row><row><cell>~&amp; for the and not operator</cell></row><row><cell>Examples of the use of PoS operators:</cell></row><row><cell>walk &amp; V : The word walk with a PoS tag that starts with V</cell></row><row><cell>(verb)</cell></row><row><cell>* &amp; N : Any noun</cell></row><row><cell>flex(house) &amp; N :</cell></row></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_14"><head>TABLE 1 .</head><label>1</label><figDesc></figDesc><table><row><cell>Description</cell><cell cols="2">Leiden notation</cell><cell>Birmingham notation</cell></row><row><cell>The name Lubbers within a &lt;HEAD&gt; tag</cell><cell cols="2">&lt;HEAD&gt;(Lubbers)</cell><cell>Lubbers within(HEAD)</cell></row><row><cell>The word premier followed by Lubbers within a</cell><cell cols="2">&lt;HEAD&gt;(premier Lubbers)</cell><cell>premier Lubbers within(HEAD)</cell></row><row><cell>&lt;HEAD&gt; tag</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Searching for an italic word between other</cell><cell cols="2">at &lt;HI rend=IT&gt;(the) bank</cell><cell>at (the within(HI,rend=IT)) bank</cell></row><row><cell>words, e.g. "at the bank"</cell><cell></cell><cell></cell><cell></cell></row><row><cell>Looking for certain question-answer patterns: a</cell><cell>&lt;S&gt;( ?</cell><cell>^)</cell><cell>? within(S)</cell></row><row><cell>sentence that contains a ?, followed by a</cell><cell cols="2">&lt;S&gt;( yes )</cell><cell>(&lt;/S&gt;within(S)yes)</cell></row><row><cell>second sentence with the word yes, followed</cell><cell>&lt;S&gt;( ?</cell><cell>^)</cell><cell>? within(S)</cell></row><row><cell>by a third sentence that also contains a ?</cell><cell cols="2">Note: ^ anchors to the end</cell><cell></cell></row><row><cell>Header query: select all freely available docu-</cell><cell cols="2">&lt;PUBLICA-</cell><cell>(</cell></row><row><cell>ments with source date 1992</cell><cell cols="2">TIONSTMT&gt;</cell><cell></cell></row><row><cell></cell><cell cols="2">( &lt;AVAILABILITY STA-TUS=FREE&gt; )</cell><cell>&lt;AVAILABILITY STA-TUS=FREE&gt; within(PUBLICATIONSTMT)</cell></row><row><cell></cell><cell cols="2">&lt;SOURCE-</cell><cell>) within(TEIHEADER)</cell></row><row><cell></cell><cell cols="2">DESC&gt; (</cell><cell>(</cell></row><row><cell></cell><cell cols="2">&lt;DATE&gt;(1992)</cell><cell>1992</cell></row><row><cell></cell><cell>)</cell><cell></cell><cell>within(DATE)</cell></row><row><cell></cell><cell></cell><cell></cell><cell>within(SOURCE-</cell></row><row><cell></cell><cell></cell><cell></cell><cell>DESC)</cell></row><row><cell></cell><cell></cell><cell></cell><cell>)</cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_0"><p>The ELAN Client user's guide</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_1"><p>Processing CQL queries</p></note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" xml:id="foot_2"><p>The ELAN common query language (CQL)</p></note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>&lt;!ELEMENT login EMPTY&gt; &lt;!ATTLIST login id ID #REQUIRED&gt; &lt;!ELEMENT passwd (#PCDATA)&gt; &lt;!ELEMENT access (default,group*)&gt; &lt;!ELEMENT default EMPTY&gt; &lt;!ATTLIST default group IDREF #IMPLIED&gt; &lt;!--cross reference to a &lt;group id="..."&gt; element --&gt; &lt;!ELEMENT groupEMPTY&gt; &lt;!ATTLIST groupid ID #REQUIRED&gt; &lt;!--id : group identification key : inalf, lingua, etc. --&gt; &lt;!--]&gt; --&gt;</p></div>
			</div>


			<div type="availability">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Required components</head><p>Some components are required in order to install an ELAN server:</p><p>1.1.6 minimum (v.1.1.8 is best) http://java.sun.com/products/jdk/1.1/index.html • Swing components (JFC v.1.1 minimum) http://java.sun.com/products/jfc/index.html • Servlet API (JSDK 2.1 minimum) http://java.sun.com/products/servlet/index.html • Corba Broker (JacORB 1.0 minimum) http://www.inf.fu-berlin.de/~brose/jacorb/</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Abstract</head><p>The ELAN project is a distributed language resources system, offering access to existing resources to their potential users throughout Europe. In order to serve the electronic multilingual resource market, our task is to specify and elaborate a network of inter-connected resource servers. This document defines the technical specifications of each nodes that form the ELAN network: the user interface of the ELAN client; the resource servers and the network management unit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Keywords</head><p>Language resources, Distributed systems, Network, User interface Download ELAN server http://www.loria.fr/projets/MLIS/ELAN/private/deliverables/elan/xsilfide.tar.zip 11 Installation</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.1">Environment variables</head><p>The CLASSPATH environment variable must be set to provide access to the required java packages. It should contain paths to:</p><p>• external components : $HOME/jdk1. <ref type="bibr">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.2">Silver HTTP server configuration</head><p>The xsilfide/silfide directory contains all the components specifics to the ELAN server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.2.1">httpd.properties configuration</head><p>Edit the httpd.properties file in the properties directory and set the following attributes : </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.2.2">other properties files</head><p>The other properties files contain various attributes but should not be modified.</p><p>• servlet.properties contains the servlets configuration and initialization arguments.</p><p>• mime.properties contains the MIME types recognized by the server.</p><p>• aliases.properties contains aliases defined by the server.</p><p>• silfide.server.properties contains the paths to some important directories in the xsilfide archive. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.3.1">ServerPrefs.xml configuration file</head><p>Edit the ServerPrefs.xml file in the silfide/preference directory and set the following attributes appropriately :</p><p>&lt;pref name="status" value="online"/&gt; server status : should not be modified.</p><p>&lt;pref name="name" value="no-name"/&gt; server name or sid : this is the server's identification reference on the network. It must be unique in the network and registered on the NMU. Please contact the NMU administrator before to set this attribute.</p><p>&lt;pref name="nmua" value="godefroy.loria.fr"/&gt; address of the NMU server. Should not be modified but on NMU administrator request.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="17.2">Features supported in the ELAN Common Query Language</head><p>In this paragraph we will discuss the features that are supported in the ELAN Common Query Language. In order to keep things simple, we do not include the actual syntax here; the actual notation will be discussed in the next paragraph.</p><p>The ELAN Common Query Language will provide the following features:</p><p>single-word expression.</p><p>Single-word expressions correspond with one word, word-plus-PoS-code or SGML tag in the corpus. A single-word expression can be:</p><p>A word expression is used to search the corpus for a word or a combination of a part-ofspeech tag and a word:</p><p>Words are defined as: * literal word. A literal string that represents a word or punctuation.</p><p>* wildcard. Wildcard searching makes it possible to specify that certain parts of a word (tag, etc) can consist of arbitrary characters, for instance, hous* would select all words that start with hous. Wildcard characters can be used any number of times anywhere in a word.</p><p>* list of alternative words. E.g., searching for the word house or houses * function. Each ELAN server will define a set of functions. The effect of the functions is the same as searching for a list of alternative words (the preceding option). In fact, one might say that a function is substituted by a list of alternatives, as defined by the function and its parameters. Functions may help the user by automatically generating lists of alternative words. An obvious example is the generation of all inflected forms of a given stem.</p><p>Each server will at least support the following two functions:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>caseless()</head><p>The result is the list of all alternatives of its arguments. For example, if the preceding sentence were the corpus, caseless(the) would be a list consisting of The and the. The caseless() function may be abbreviated to case().</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">The site has no corpus retrieval software</head><p>In this case the specific requirements depend on the corpus exploitation software to be installed:</p><p>Leiden software:</p><p>Leiden software:</p><p>For precompiled binaries:</p><p>At least a SUN UltraSparc I, 128 Mb memory and free disk space of at least twice the size of the corpus. Operating system: Sun Solaris 2.6 or higher.</p><p>If the software has to be built for the provider's equipment:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Unix operating system</head><p>Unix Make utility or (preferred) GNU make 3.77 No specific machine required as long as it is equipped with as much memory as possible.</p><p>At least Java Development Kit 1.1</p><p>Storage requirements are about 75% of the original corpus file size for non-annotated material, and about 80% for annotated XML files.</p><p>If the software has to be built for the provider's equipment:</p><p>Not applicable, as JAVA binaries are delivered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Pisa software</head><p>For precompiled binaries At least a Pentium II-300 with 64Mb and free disk space of at least twice the size of the corpus.</p><p>Operating Systems: Windows NT or Windows 95/98</p><p>If the software has to be built for the provider's equipment:</p><p>Java Development Kit ] = {"nadia","jean-luc","patrice","laurent","samuel"}; /** * list of languages to generate fake languages when generating documents */ private static String langues[] = {"francais","allemand","japonais","anglais","espagnol"}; /** * list of words to generate fake results */ private static String mots[] = {"cette","unité","dont","la","création","a","été", "officialisée","le","19","décembre","1997","par", "la","signature","du","contrat","quadriennal","avec", "le","ministère","de","l'education","nationale","de", "la","recherche","et","de","la","technologie","par", "une","convention","entre","les","cinq","partenaires", "succède","ainsi","au","centre","de","recherche","en", "informatique","de","Nancy","(CRIN)","et","aux", "équipes","communes","entre","celui-ci","et","l'unité", "de","recherche","INRIA","de","Lorraine"};  h.put("idType","document"); h.put("title",getTitle()); h.put("author",getFirstName()+" "+getLastName()); h.put("language",getLangue()); h.put("size",getTaille()); h.put("comments",getCommentaire()); Hashtable corpora = new Hashtable(); corpora.put("idType","subcorpus"); corpora.put("label","all corpora"); corpora.put("description","the complete "+sid+"'s corpus"); corpora.put("size","1000000"); rsp.addRecord(sid,"allCorpora",null,corpora); sessions.put(sessionID,new Integer(cpt)); if (eq!=null) queries.put(sessionID,eq);  <ref type="figure">-------------------------------"</ref>  </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">The XSilfide archive . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11.1 Environment variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11.2 Silver HTTP server configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11.2.1 httpd.properties configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11.2.2 other properties files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">3 ELAN server configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11.3.1 ServerPrefs.xml configuration file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">A user-friendly configuration tool... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Starting the server... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<orgName type="collaboration">Testing... . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</orgName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Go to the silfide/bin directory and launch the &quot;server&quot; or &quot;server.bat&quot; script, respectively on Unix and Windows systems. you should see something like: XSILFIDE_ROOT=</title>
	</analytic>
	<monogr>
		<title level="m">Starting the server</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">Initializing</forename><surname>Httpserver</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<author>
			<persName><surname>Silver</surname></persName>
		</author>
		<ptr target="http://godefroy.loria.fr:8888/" />
		<title level="m">HttpServer is running</title>
		<imprint/>
	</monogr>
	<note>version 0.32</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Requirements 2.1 General requirements Independent of the situations described in paragraph 2.2, Specific requirements, the following general requirements apply to act as a server within ELAN</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Apache), configured to accept servlets 3. running a Java Virtual Machine, compliant with the specifications of Java Development Kit (JDK)</title>
		<author>
			<orgName type="collaboration">fast connection to Internet</orgName>
		</author>
	</analytic>
	<monogr>
		<title level="m">not based on modem or comparable technology 2. running an appropriate http-daemon</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">the format of the data to be accessed should be level zero (no markup) or TEI DTD compliant</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Specific requirements With respect to the specific requirements, two situations can be distinguished</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m">SIL extensions default declaration</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&lt;!--Sil</forename><surname>Document</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&lt;!element</forename><surname>Sil</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>uid, (%SIL.module.e;</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&gt;</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<author>
			<persName><forename type="first">&lt;!--Lang</forename></persName>
		</author>
		<title level="m">RFC1766] language value sid : Silfide server identification</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&lt;!--===================</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&lt;!--</forename><surname>User</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&lt;!--===================</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName><forename type="first">&lt;!element</forename><surname>Uid</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>login, passwd, access</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">&gt;Sandeau, Jules&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Fran-çais&lt;/attr&gt;&lt;attr name=&quot;size&quot;&gt;86057&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW3&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Histoire Romaine&lt;/ attr&gt;&lt;attr name=&quot;author&quot;&gt;Michelet, Jules&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/ attr&gt;&lt;attr name=&quot;size&quot;&gt;144022 &lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW4&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Récits des temps mérovin-giens&lt;/attr&gt;&lt;attr name=&quot;author&quot;&gt;Thierry, Augustin&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/attr&gt;&lt;attr name=&quot;size&quot;&gt;90232&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW5&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Sous les tilleuls&lt;/ attr&gt;&lt;attr name=&quot;author&quot;&gt;Karr, Alphonse&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/ attr&gt;&lt;attr name=&quot;size&quot;&gt;140807&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW6&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Le parfum de la dame en noir&lt;/attr&gt;&lt;attr name=&quot;author&quot;&gt;Leroux, Gaston&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Fran-çais&lt;/attr&gt;&lt;attr name=&quot;size&quot;&gt;124157&lt;/attr&gt;&lt;/record&gt; &lt;record sid=</title>
		<idno>meta&gt; &lt;result type=&quot;header&quot;&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW1&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Le Notaire de Chantilly&lt;/ attr&gt;&lt;attr name=&quot;author&quot;&gt;Gozlan, Léon&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/ attr&gt;&lt;attr name=&quot;size&quot;&gt;141201&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW2&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Mademoiselle de la Sei- gliere&lt;/attr&gt;&lt;attr name=&quot;author&quot;</idno>
	</analytic>
	<monogr>
		<title level="m">Auguste de&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/ attr&gt;&lt;attr name=&quot;size&quot;&gt;34564&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW9&quot;&gt;&lt;attr name=&quot;title</title>
		<meeting><address><addrLine>Villiers de L&apos;Isle-Adam</addrLine></address></meeting>
		<imprint/>
	</monogr>
	<note>idno=&quot;FRW7&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Le Père Goriot&lt;/ attr&gt;&lt;attr name=&quot;author&quot;&gt;Balzac, Honoré de .&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Fran-çais&lt;/attr&gt;&lt;attr name=&quot;size&quot;&gt;309234&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW8&quot;&gt;&lt;attr name=&quot;title&quot;&gt;Contes cruels&lt;/attr&gt;&lt;attr name=. &gt;Une brève histoire du temps&lt;/attr&gt;&lt;attr name=&quot;author&quot;&gt;Hawking, Stephen W.&lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/attr&gt;&lt;attr name=&quot;size&quot;&gt;???&lt;/attr&gt;&lt;/record&gt; &lt;record sid=&quot;nancy&quot; idno=&quot;FRW13&quot;&gt;&lt;attr name=&quot;title&quot;&gt;La fiancée d&apos;Achille&lt;/ attr&gt;&lt;attr name=&quot;author&quot;&gt;Alki Zeï &lt;/attr&gt;&lt;attr name=&quot;language&quot;&gt;Français&lt;/ attr&gt;&lt;attr name=&quot;size&quot;&gt;???&lt;/attr&gt;&lt;/record&gt;</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
